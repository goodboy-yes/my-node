"use strict";(self.webpackChunkmy_notes=self.webpackChunkmy_notes||[]).push([[9],{5776:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-0336689b",path:"/css/pseudo-classes-and-elements.html",title:"伪类和伪元素",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"伪类",slug:"伪类",children:[]},{level:2,title:"伪元素",slug:"伪元素",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],filePathRelative:"css/pseudo-classes-and-elements.md",git:{updatedTime:1630409364e3,contributors:[]}}},7103:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const e=(0,a(6252).uE)('<h1 id="伪类和伪元素" tabindex="-1"><a class="header-anchor" href="#伪类和伪元素" aria-hidden="true">#</a> 伪类和伪元素</h1><h2 id="伪类" tabindex="-1"><a class="header-anchor" href="#伪类" aria-hidden="true">#</a> 伪类</h2><p>伪类存在的意义是为了通过选择器找到那些<strong>不存在于 DOM 树中的信息</strong>（例如&lt;a&gt;标签的:link、:visited 等，这些信息不存在于 DOM 树结构中，只能通过 CSS 选择器来获取）以及<strong>不能被常规 CSS 选择器获取到的信息</strong>（例如要修改第几个子元素的样式）</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">selector: pseudo-class</span> <span class="token punctuation">{</span>\n  <span class="token property">property</span><span class="token punctuation">:</span> value<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/*\n常见伪类：\n:active —— 样式添加到正在被激活的元素\n:focus —— 样式添加到获得焦点的元素\n:hover —— 样式添加到鼠标悬浮的元素\n:link —— 样式添加到未被访问过的链接\n:visited —— 样式添加到已经访问过的链接\n:first-child —— 样式添加到第一个子元素\n*/</span>\n\n<span class="token comment">/*例子：*/</span>\n<span class="token selector">p:first-child</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/*能够被5整除的奇数行*/</span>\n<span class="token selector">table tr:nth-child(2n + 1):nth-child(5n) td</span> <span class="token punctuation">{</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> #f0f<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="伪元素" tabindex="-1"><a class="header-anchor" href="#伪元素" aria-hidden="true">#</a> 伪元素</h2><p>伪元素用于<strong>创建一些不在文档树中的元素</strong>，并为其添加样式。比如我们可以通过:before 来在一个元素前增加一些文本，并为这些文本添加样式。虽然用户可以看到这些文本，但是这些文本实际上不在文档树中</p><p>简单来说，伪元素创建了一个虚拟容器，这个容器不包含任何 DOM 元素，但是可以包含内容。另外，开发者还可以为伪元素定制样式。</p><p><strong>一个选择器只能使用一个伪元素</strong>，并且伪元素必须处于选择器语句的最后。</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">selector:pseudo-element</span> <span class="token punctuation">{</span>\n  <span class="token property">property</span><span class="token punctuation">:</span> value<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">/*\n常见伪元素：\n:first-letter —— 样式添加到文本首字母\n:first-line —— 样式添加到文本首行\n:before —— 样式添加到元素之前\n:after —— 样式添加到元素之后\n*/</span>\n\n<span class="token comment">/*例子：*/</span>\n<span class="token selector">p:first-letter</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><blockquote><p>实际使用中<code>:before</code>，<code>::before</code>这两种写法都是等效。只是<code>:befor</code> 是 CSS2 的写法，<code>::before</code> 是 CSS3 的写法。双冒号(::)这是 CSS3 规范中的要求，目的是为了区分伪类和伪元素，大多数浏览器都支持这两种表示方式。单冒号(:)用于 CSS3 伪类，双冒号(::)用于 CSS3 伪元素。对于 CSS2 中已经有的伪元素，例如 <code>:before</code>，单冒号和双冒号的写法 <code>::before</code> 作用是一样的。一般情况下为兼容性考虑使用单冒号。</p></blockquote><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li><p>伪类和伪元素都是用来表示文档树以外的&quot;元素&quot;</p></li><li><p>伪类和伪元素分别用单冒号:和双冒号::来表示</p></li><li><p>伪类的效果需要一个实际的类才能达到，而伪元素需要一个实际的元素才能达到。</p></li><li><p>伪类可以同时运用多个，而伪元素只能一次用一个。</p></li><li><p>在 CSS3 中，伪类用一个冒号:，伪元素用两个冒号::。</p></li></ul>',12),p={render:function(n,s){return e}}}}]);