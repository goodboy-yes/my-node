"use strict";(self.webpackChunkmy_notes=self.webpackChunkmy_notes||[]).push([[97],{8215:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-04a942ba",path:"/js/knowledge-points.html",title:"知识点",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Tips",slug:"tips",children:[]},{level:2,title:"json 对象和普通 JS 对象的区别",slug:"json-对象和普通-js-对象的区别",children:[]},{level:2,title:"执行栈",slug:"执行栈",children:[]},{level:2,title:"call()，apply()，bind()区别",slug:"call-apply-bind-区别",children:[]},{level:2,title:"Set、WeakSet 和 array",slug:"set、weakset-和-array",children:[]},{level:2,title:"Map、WeakMap 和 object",slug:"map、weakmap-和-object",children:[]},{level:2,title:"Attributes 和 DOM Properties",slug:"attributes-和-dom-properties",children:[]},{level:2,title:"for in 和 for of 的区别",slug:"for-in-和-for-of-的区别",children:[{level:3,title:"for in",slug:"for-in",children:[]},{level:3,title:"for of",slug:"for-of",children:[]}]},{level:2,title:"split() 、splice()、slice()",slug:"split-、splice-、slice",children:[{level:3,title:"split()",slug:"split",children:[]},{level:3,title:"splice()",slug:"splice",children:[]},{level:3,title:"slice()",slug:"slice",children:[]}]},{level:2,title:"Slice 无参调用",slug:"slice-无参调用",children:[]},{level:2,title:"JS 中数据类型检测",slug:"js-中数据类型检测",children:[{level:3,title:"typeof",slug:"typeof",children:[]},{level:3,title:"instanceof",slug:"instanceof",children:[]},{level:3,title:"constructor",slug:"constructor",children:[]},{level:3,title:"Object.prototype.toString.call()",slug:"object-prototype-tostring-call",children:[]}]},{level:2,title:"报错代码与 eventloop",slug:"报错代码与-eventloop",children:[]}],filePathRelative:"js/knowledge-points.md",git:{updatedTime:1631548407e3,contributors:[]}}},7357:(n,s,a)=>{a.r(s),a.d(s,{default:()=>b});var t=a(6252);const p=(0,t.uE)('<h1 id="知识点" tabindex="-1"><a class="header-anchor" href="#知识点" aria-hidden="true">#</a> 知识点</h1><h2 id="tips" tabindex="-1"><a class="header-anchor" href="#tips" aria-hidden="true">#</a> Tips</h2><ul><li><p><code>Json</code>文件不能写注释</p></li><li><p>移动端开发为什么不使用<code>jquery</code>： 1、<code>jquery</code>体积大 2、<code>jquery</code>做了大量的兼容，移动端都是高版本浏览器，没有必要做兼容，并不是说一定不用，最好不要用</p></li><li><p><code>{color:&#39;blue&#39;, &#39;font-size&#39;:5px}</code>对象里键名里有<code>-</code>的要加引号</p></li><li><p><code>!!</code>常常用来做类型判断，省去了多次判断 null、undefined 和空字符串的冗余代码</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//a有内容才执行的代码...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>省略<code>http:</code>前缀</p><p>如果你对形如 <code>//cdn.com/id/app_a6976b6d.css</code> 这样的 URL 感到陌生，你需要知道这种 <code>URL</code> 省掉了前面的 <code>http:</code> 或者 <code>https:</code> 前缀， 这样做的好处时在访问这些资源的时候会自动的根据当前<code>HTML</code> 的 <code>URL</code> 是采用什么模式去决定是采用 <code>HTTP</code> 还是 <code>HTTPS</code> 模式。</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">body</span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>//cdn.com/id/arch_ae805d49.png<span class="token punctuation">)</span></span> repeat<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><h2 id="json-对象和普通-js-对象的区别" tabindex="-1"><a class="header-anchor" href="#json-对象和普通-js-对象的区别" aria-hidden="true">#</a> json 对象和普通 JS 对象的区别</h2><p>JSON 是 JavaScript 原生格式，它是一种严格的 js 对象的格式，JSON 的属性名必须有<strong>双</strong>引号，如果值是字符串，也必须是<strong>双</strong>引号。</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>let obj = <span class="token punctuation">{</span><span class="token punctuation">}</span>; <span class="token comment">//这只是JS对象</span>\nlet obj2=<span class="token punctuation">{</span>&#39;width&#39;<span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span>&#39;height&#39;<span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token comment">//JS对象</span>\nlet obj3=<span class="token punctuation">{</span><span class="token property">&quot;width&quot;</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token property">&quot;height&quot;</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;rose&quot;</span><span class="token punctuation">}</span><span class="token comment">//JSON格式的JS对象</span>\n\n<span class="token comment">//对象转json</span>\nJSON.stringify(<span class="token punctuation">{</span>\n        name<span class="token operator">:</span> &#39;苹果 X&#39;<span class="token punctuation">,</span>\n        price<span class="token operator">:</span> <span class="token number">8888</span>\n    <span class="token punctuation">}</span>\n)\n\n<span class="token comment">//Json转对象</span>\nJSON.parse(&#39;<span class="token punctuation">{</span><span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;苹果 X&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;price&quot;</span><span class="token operator">:</span> <span class="token string">&quot;8888&quot;</span><span class="token punctuation">}</span>&#39;)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="执行栈" tabindex="-1"><a class="header-anchor" href="#执行栈" aria-hidden="true">#</a> 执行栈</h2><p>执行栈，也叫调用栈，具有 <code>LIFO</code>（Last in, First out 后进先出）结构，用于存储在代码执行期间创建的所有执行上下文。</p><p>当 <code>JavaScript</code> 引擎首次读取脚本时，会创建一个全局执行上下文并将其 Push 到当前执行栈中。每当发生函数调用时，引擎都会为该函数创建一个新的执行上下文并 Push 到当前执行栈的栈顶。</p><p>引擎会运行执行上下文在执行栈栈顶的函数，根据 <code>LIFO</code> 规则，当此函数运行完成后，其对应的执行上下文将会从执行栈中 Pop 出，上下文控制权将转到当前执行栈的下一个执行上下文</p><h2 id="call-apply-bind-区别" tabindex="-1"><a class="header-anchor" href="#call-apply-bind-区别" aria-hidden="true">#</a> call()，apply()，bind()区别</h2><p><code>bind()</code> 返回的是一个函数</p><p><code>apply()</code> 方法接受两个参数第一个是函数运行的作用域，另外一个是一个参数数组(arguments)。</p><p><code>call()</code> 方法第一个参数的意义与 <code>apply()</code> 方法相同，只是其他的参数需要一个个列举出来。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> myObject <span class="token operator">=</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>myObject<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { value: 100 }</span>\n<span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>myObject<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { value: 100 }</span>\n\n<span class="token keyword">const</span> newFoo <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>myObject<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">newFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { value: 100 }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="set、weakset-和-array" tabindex="-1"><a class="header-anchor" href="#set、weakset-和-array" aria-hidden="true">#</a> Set、WeakSet 和 array</h2><p>Set 与 Array 是不同的两种数据结构，它并不是要完全替换 Array，而是提供额外的数据类型来完成 Array 缺少的一些功能</p><p><strong>使用 set 的场景：</strong></p><ul><li><p>如果我们只希望存储不同的元素，使用 Set 会更好</p></li><li><p>当我们想要以最小成本维护不重复的数据，或者使用到大量不同的数据集时只需要使用最基本的集合操作而无需直接访问元素。</p></li><li><p>可以利用 Set 的一些原生方法轻松的完成数组去重，查找数组公共元素及不同元素等操作</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 并集</span>\n<span class="token keyword">let</span> union <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">,</span> <span class="token operator">...</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Set {1, 2, 3, 4}</span>\n\n<span class="token comment">// 交集</span>\n<span class="token keyword">let</span> intersect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> b<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// set {2, 3}</span>\n\n<span class="token comment">// （a 相对于 b 的）差集</span>\n<span class="token keyword">let</span> difference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>b<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Set {1}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li></ul><p><strong>使用 array 的场景</strong></p><ul><li>数组适用于希望保留重复元素，可能进行大量修改（增、删操作），array 获取元素更节省 CPU 工作量，或是希望通过索引对元素进行快速访问的场景，</li></ul><p><strong>使用 WeakSet 的场景</strong></p><ul><li><p>WeakSet 的成员只能是对象，WeakSet 不可遍历。</p></li><li><p>WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。WeakSet 适合临时存放一组对象，以及存放跟对象绑定的信息。只要这些对象在外部消失，它在 WeakSet 里面的引用就会自动消失。WeakSet 的一个用处，是储存 DOM 节点，而不用担心这些节点从文档移除时，会引发内存泄漏。</p></li></ul><h2 id="map、weakmap-和-object" tabindex="-1"><a class="header-anchor" href="#map、weakmap-和-object" aria-hidden="true">#</a> Map、WeakMap 和 object</h2><p>JavaScript 的对象（Object），本质上是键值对的集合（Hash 结构），但是传统上只能用字符串当作键。map 类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。</p><p>任何具有 Iterator 接口、且每个成员都是一个双元素的数组的数据结构都可以当作 Map 构造函数的参数。这就是说，Set 和 Map 都可以用来生成新的 Map。</p><p><strong>使用 map 的场景</strong></p><ul><li>如果你需要“键值对”的数据结构，Map 比 Object 更合适。</li></ul><p><strong>使用 WeakMap 的场景</strong></p><ul><li><p><code>WeakMap</code>只接受对象作为键名（<code>null</code>除外），<code>WeakMap</code>的键名所指向的对象，不计入垃圾回收机制，它的键名所引用的对象都是弱引用。WeakMap 弱引用的只是键名，而不是键值。键值依然是正常引用。没有遍历操作。</p></li><li><p>在网页的 DOM 元素上添加数据，就可以使用<code>WeakMap</code>结构。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> wm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;example&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nwm<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token string">&quot;some information&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nwm<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;some information&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p>WeakMap 的另一个用处是部署私有属性</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> _counter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> _action <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Countdown</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">counter<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    _counter<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> counter<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    _action<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">dec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> counter <span class="token operator">=</span> _counter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>counter <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n    counter<span class="token operator">--</span><span class="token punctuation">;</span>\n    _counter<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> counter<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>counter <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      _action<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Countdown</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;DONE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nc<span class="token punctuation">.</span><span class="token function">dec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nc<span class="token punctuation">.</span><span class="token function">dec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// DONE</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>上面代码中，<code>Countdown</code>类的两个内部属性<code>_counter</code>和<code>_action</code>，是实例的弱引用，所以如果删除实例，它们也就随之消失，不会造成内存泄漏。</p></li></ul>',30),e=(0,t.Uk)("参考链接: "),o={href:"https://es6.ruanyifeng.com/#docs/set-map",target:"_blank",rel:"noopener noreferrer"},c=(0,t.Uk)("Set 和 Map 数据结构"),l=(0,t.uE)('<h2 id="attributes-和-dom-properties" tabindex="-1"><a class="header-anchor" href="#attributes-和-dom-properties" aria-hidden="true">#</a> Attributes 和 DOM Properties</h2><p>我们知道浏览器在加载页面之后会对页面中的标签进行解析，并生成与之相符的 DOM 对象，每个标签中都可能包含一些属性，如果这些属性是<strong>标准属性</strong>，那么解析生成的 DOM 对象中也会包含与之对应的属性</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>page<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>由于 <code>id</code> 是标准属性，所以我们可以通过 <code>document.body.id</code> 来访问它的值，实际上我们常说的 <code>Attr</code> 指的就是那些存在于标签上的属性，而 <code>DOM Prop</code> 就是存在于 DOM 对象上的属性。但是当标签上存在非标准属性时，该属性不会被转化为 <code>DOM Prop</code>，例如：</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">custom</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>val<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>由于 <code>custom</code> 是非标准属性，所以当你尝试通过 <code>document.body.custom</code> （访问 prop）访问其值时会得到 <code>undefined</code>，这也是为什么 <code>setAttribute</code> （set 的是 html 元素的 attr）方法存在的原因，因为该方法允许我们为 DOM 元素设置自定义属性。另外该方法也允许我们为 DOM 元素设置标准属性的值，所以我们可不可以总是使用 <code>setAttribute</code> 设置全部的 DOM 属性呢？答案是：不行。举个例子：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// checkbox 元素</span>\n<span class="token keyword">const</span> checkboxEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 使用 setAttribute 设置 checked 属性为 false</span>\ncheckboxEl<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;checked&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>checkboxEl<span class="token punctuation">.</span>checked<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>可以看到虽然我们使用 <code>setAttribute</code> 函数将复选框的 <code>checked</code> 属性设置为 <code>false</code>，但是当我们访问 <code>checkboxEl.checked</code> 时得到的依然是 <code>true</code>，这是因为在 <code>setAttribute</code> 函数为元素设置属性时，无论你传递的值是什么类型，它都会将该值转为字符串再设置到元素上，所以如下两句代码是等价的：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>checkboxEl<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;checked&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 等价于</span>\ncheckboxEl<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;checked&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;false&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>一些特殊的 <code>attribute</code>，比如 <code>checked/disabled</code> 等，只要出现了，对应的 <code>property</code> 就会被初始化为 <code>true</code>，无论设置的值是什么,只有调用 <code>removeAttribute</code> 删除这个 <code>attribute</code>，对应的 <code>property</code> 才会变成 <code>false</code>。</li></ul><p>这就指引我们有些属性不能通过 <code>setAttribute</code> 设置，而是应该直接通过 DOM 元素设置：<code>el.checked = true</code>。好在这样的属性不多，我们可以列举出来：<code>value</code>、<code>checked</code>、<code>selected</code>、<code>muted</code>。除此之外还有一些属性也需要使用 <code>Property</code> 的方式设置到 DOM 元素上，例如 <code>innerHTML</code> 和 <code>textContent</code> 等等。**</p><p><code>getAttribute()</code>不区分大小写,有的<code>attr</code>和<code>prop</code>可同步，如</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 特性 =&gt; 属性</span>\ninput<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">alert</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// id（更新了）</span>\n\n<span class="token comment">// 属性 =&gt; 特性</span>\ninput<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">&quot;newId&quot;</span><span class="token punctuation">;</span>\n<span class="token function">alert</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// newId（更新了）</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>有些只能从单向传递</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 特性 =&gt; 属性</span>\ninput<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">alert</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// text</span>\n\n<span class="token comment">// 这操作无效 属性 =&gt; 特性</span>\ninput<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&quot;newValue&quot;</span><span class="token punctuation">;</span> <span class="token comment">//（input框内的值会更新）</span>\n<span class="token function">alert</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// text（没有更新！）</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>当属性值是布尔值</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">&quot;input&quot;</span> type<span class="token operator">=</span><span class="token string">&quot;checkbox&quot;</span> checked<span class="token operator">&gt;</span> checkbox\n\n<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>\n  <span class="token function">alert</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;checked&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 特性值是：空字符串</span>\n  <span class="token function">alert</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>checked<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 属性的值是：true</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>当属性值是对象时</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;div&quot;</span> style<span class="token operator">=</span><span class="token string">&quot;color:red;font-size:120%&quot;</span><span class="token operator">&gt;</span>Hello<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n\n<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>\n  <span class="token comment">// 字符串</span>\n  <span class="token function">alert</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;style&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// color:red;font-size:120%</span>\n\n  <span class="token comment">// 对象</span>\n  <span class="token function">alert</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>style<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object CSSStyleDeclaration]</span>\n  <span class="token function">alert</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// red</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>但是自定义的特性也存在问题。如果我们使用了一个非标准化的特性，之后却变成了一个标准化的值并用来做其他事情，HTML 语言一直在发展，越来越多的标准化特性解决了开发者的开发需求。这就是一个不可控的例子。</p>',20),u=(0,t.Uk)("为了解决这个冲突产生了 "),i={href:"https://html.spec.whatwg.org/#embedding-custom-non-visible-data-with-the-data-*-attributes",target:"_blank",rel:"noopener noreferrer"},r=(0,t.Uk)("data-*"),k=(0,t.Uk)(" 这个特性。"),d=(0,t.uE)('<p><strong>所有以 “data-” 开头的特性值可以给编程人员正常使用，同时它还是 dataset 合法值。</strong></p><p>例如, 如果一个 <code>elem</code> 有一个键名是 <code>&quot;data-about&quot;</code> 的特性，那么可以通过 <code>elem.dataset.about</code> 取到这个合法值。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>body data<span class="token operator">-</span>about<span class="token operator">=</span><span class="token string">&quot;Elephants&quot;</span><span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>\n  <span class="token function">alert</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>about<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Elephants</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="for-in-和-for-of-的区别" tabindex="-1"><a class="header-anchor" href="#for-in-和-for-of-的区别" aria-hidden="true">#</a> for in 和 for of 的区别</h2><h3 id="for-in" tabindex="-1"><a class="header-anchor" href="#for-in" aria-hidden="true">#</a> for in</h3><p>不要使用 for in 遍历数组，会存在诸多问题</p><ul><li>index 索引为字符串型数字，不能直接进行几何运算，但可以使用 arr[index]</li><li>遍历顺序有可能不是按照实际数组的内部顺序</li><li>使用 for in 会遍历数组所有的可枚举属性，包括原型</li></ul><p>可用 for in 遍历对象，并且也会遍历到对象的原型方法，如果不想遍历原型方法和属性的话，可以在循环内部使用 hasOwnPropery 方法判断属性是否是该对象的实例属性</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> myObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n　　<span class="token keyword">if</span>（myObject<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n　　　　console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n　　<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>或者使用<code>Object.keys(obj)</code>获取对象的实例属性组成的数组，不包括原型方法和属性</p><h3 id="for-of" tabindex="-1"><a class="header-anchor" href="#for-of" aria-hidden="true">#</a> for of</h3><ul><li>for of 遍历数组是遍历元素值，不包括数组的原型属性，不可得到索引</li><li>for of 循环不支持普通对象</li><li>for..of 适用遍历数/数组对象/字符串/map/set 等拥有迭代器对象的集合，但是不能遍历对象，因为没有迭代器对象。与 <code>forEach()</code>不同的是，它可以正确响应 <code>break</code>、<code>continue</code> 和 <code>return</code> 语句</li><li>遍历 map 对象时适合用解构,例如;<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> phoneBookMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">&quot;&#39;s phone number is: &quot;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><h2 id="split-、splice-、slice" tabindex="-1"><a class="header-anchor" href="#split-、splice-、slice" aria-hidden="true">#</a> split() 、splice()、slice()</h2><h3 id="split" tabindex="-1"><a class="header-anchor" href="#split" aria-hidden="true">#</a> split()</h3><p><strong>定义和用法</strong></p><p>split() 方法用于把一个字符串分割成字符串数组。</p><p><strong>语法</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>stringObject<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>separator<span class="token punctuation">,</span> howmany<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><table><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">separator</td><td style="text-align:left;">必需。字符串或正则表达式，从该参数指定的地方分割 stringObject。</td></tr><tr><td style="text-align:left;">howmany</td><td style="text-align:left;">可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。</td></tr></tbody></table><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&quot;How are you doing today?&quot;</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>输出：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>How,are,you,doing,today?\nH,o,w, ,a,r,e, ,y,o,u, ,d,o,i,n,g, ,t,o,d,a,y,?\nHow,are,you\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="splice" tabindex="-1"><a class="header-anchor" href="#splice" aria-hidden="true">#</a> splice()</h3><p><strong>定义和用法</strong></p><p>splice() 方法向/从数组中添加/删除项目，然后返回被删除的项目。</p><p><strong>该方法会改变原始数组。</strong></p><p><strong>语法</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>arrayObject<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>howmany<span class="token punctuation">,</span>item1<span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>itemX<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><table><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">index</td><td style="text-align:left;">必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。</td></tr><tr><td style="text-align:left;">howmany</td><td style="text-align:left;">必需。要删除的项目数量。如果设置为 0，则不会删除项目。</td></tr><tr><td style="text-align:left;">item1, ..., itemX</td><td style="text-align:left;">可选。向数组添加的新项目。</td></tr></tbody></table><p><strong>返回值</strong></p><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">Array</td><td style="text-align:left;">包含被删除项目的新数组，如果有的话。</td></tr></tbody></table><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;George&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Thomas&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;James&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Adrew&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Martin&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>\narr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;William&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>输出：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>George,John,Thomas,James,Adrew,Martin\nGeorge,John,William,Thomas,James,Adrew,Martin\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="slice" tabindex="-1"><a class="header-anchor" href="#slice" aria-hidden="true">#</a> slice()</h3><p><strong>定义和用法</strong></p><p><code>slice()</code> 方法可从已有的数组（或字符串）中返回选定的元素。</p><p>该方法并<strong>不会修改数组</strong>，而是返回一个子数组。如果想删除数组中的一段元素，应该使用方法 <code>Array.splice()</code>。</p><p><strong>语法</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>arrayObject<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><table><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">start</td><td style="text-align:left;">必需。规定从何处开始选取。如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。</td></tr><tr><td style="text-align:left;">end</td><td style="text-align:left;">可选。规定从何处结束选取。该参数是数组片断结束处的数组下标。如果没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。</td></tr></tbody></table><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;George&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Thomas&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;James&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Adrew&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Martin&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\narr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Thomas,James</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="slice-无参调用" tabindex="-1"><a class="header-anchor" href="#slice-无参调用" aria-hidden="true">#</a> Slice 无参调用</h2><p>Slice 无参调用可以将对象转化成数组，<strong>数组的 Slice 无参调用是浅拷贝</strong>，复制出新的 Array，再里面嵌套的内容是引用</p><p><strong>类似数组的对象</strong></p><ul><li>DOM 操作返回的 NodeList 集合</li><li>函数内部的<code>arguments</code>对象</li><li><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> arrayLike <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token number">0</span><span class="token operator">:</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span>\n  <span class="token number">1</span><span class="token operator">:</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span>\n  <span class="token number">2</span><span class="token operator">:</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span>\n  length<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ul><p><strong>转为数组的方法</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ES5的写法</span>\n<span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span>\n\n<span class="token comment">// ES6的写法</span>\n<span class="token keyword">let</span> arr2 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="js-中数据类型检测" tabindex="-1"><a class="header-anchor" href="#js-中数据类型检测" aria-hidden="true">#</a> JS 中数据类型检测</h2><p><code>tyepof [value]</code> ：检测数据类型的运算符</p><p><code>[example] instanceof [class]</code> ： 检测某一个实例是否属于这个类</p><p><code>[example].constructor===[class]</code> ：检测实例和类关系的，从而检测数据类型</p><p><code>Object.prototype.toString.call([value])</code>：检测数据类型</p><h3 id="typeof" tabindex="-1"><a class="header-anchor" href="#typeof" aria-hidden="true">#</a> typeof</h3><p>typeof 检测的结果是一个字符串，包含了对应的数据类型（ <code>number</code>、<code>string</code>、<code>boolean</code>、<code>undefined</code>、<code>object</code>、<code>function</code>、<code>symbol</code>、<code>bigint</code>）</p><p><strong>优点</strong>：使用起来简单，基本数据类型值基本上都可以有效检测，引用数据类型值也可以检测出来</p><p><strong>局限性</strong>：</p><ul><li><p>typeof null 的结果是“object”;（这是浏览器的 BUG：所有的值在计算中都以二进制编码储存，浏览器中把前三位 000 的当作对象，而 null 的二进制前三位是 000，所以被识别为对象，但是他不是对象，他是空对象指针，是基本类型值）</p></li><li><p>typeof 普通对象/数组对象/正则对象...， 结果都是“object”，这样就无法基于 typeof 区分是普通对象还是数组对象</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>type <span class="token number">NaN</span> <span class="token comment">//NaN、Infinity 都是数字类型的，检测结果都是“number”;</span>\n\n<span class="token comment">// 判断是否为对象</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> x <span class="token operator">==</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="instanceof" tabindex="-1"><a class="header-anchor" href="#instanceof" aria-hidden="true">#</a> instanceof</h3><p>用来检测某个实例是否属于这个类，当前类的原型只要出现在了实例的原型链上就返回 true</p><p><strong>优点</strong>：弥补 typeof 无法细分对象类型的缺点</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//=&gt;&quot;object&quot;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//=&gt;true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//=&gt;true 数组对象是Object的实例</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>局限性</strong>：</p><ul><li><p>要求检测的实例必须是对象数据类型的，基本数据类型的实例是无法基于它检测出来的（字面量方式创建的不能检测，构造函数创建的就可以检测）。从严格意义上来讲，只有实例创建出来的结果才是标准的对象数据类型值，但由于 JS 的松散特点，导致了字面量方式创建的结果可以使用 prototype 上提供的方法</p></li><li><p>不管是什么对象，都是 Object 的实例，检测结果都是 TRUE，所以无法基于这个结果判断是否为普通对象</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// instanceof检测的实例必须都是引用数据类型的，它对基本数据类型值操作无效</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//=&gt;false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//=&gt;true</span>\n\n<span class="token comment">// instanceof检测机制：验证当前类的原型prototype是否会出现在实例的原型链__proto__上，只要在它的原型链上，则结果都为TRUE</span>\n<span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//=&gt;true f其实不是数组，因为它连数组的基本结构都是不具备的</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor" aria-hidden="true">#</a> constructor</h3><p>判断当前的实例的 constructor 的属性值是不是预估的类。<code>实例.constructor</code> 一般都等于 <code>类.prototype.constructor</code> 也就是当前类本身（前提是 constructor 并没有被破坏）</p><p><strong>优点</strong>：</p><ul><li>能检测基本数据类型，也可细分对象类型</li></ul><p><strong>局限性</strong>：</p><ul><li>不能够给当前类的原型进行重定向，不能够给当前实例增加私有属性 constructor，会造成检测的结果不准确</li><li>存在不确定性，非常容易被修改，因为 JS 中的 constructor 是不被保护的（用户可以自己随便改）</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//=&gt;true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Object<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//=&gt;false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Object<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//=&gt;true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Number<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//=&gt;true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="object-prototype-tostring-call" tabindex="-1"><a class="header-anchor" href="#object-prototype-tostring-call" aria-hidden="true">#</a> Object.prototype.toString.call()</h3><p>找到 Object.prototype 上的 toString 方法，让 toString 方法执行，并且基于 call 让方法中的 this 指向检测的数据值，这样就可以实现数据类型检测了。<strong>是最准确最常用的方式</strong></p><p>每一种数据类型的构造函数的原型上都有 toString 方法，除了 Object.prototype 上的 toString 是用来返回当前实例所属类的信息（检测数据类型的），其余的都是转换为字符串的</p><p><strong>优点</strong>：专门用来检测数据类型的方法，基本上不存在局限性的数据类型检测方式,基于他可以有效的检测任何数据类型的值</p><p><strong>局限性</strong>：只能检测内置类，不能检测自定义类，只要是自定义类返回的都是<code>[Object Object]</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> class2type <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> toString <span class="token operator">=</span> class2type<span class="token punctuation">.</span>toString<span class="token punctuation">;</span> <span class="token comment">//=&gt;Object.prototype.toString</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//=&gt;&quot;[object Number]&quot;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//=&gt;&quot;[object Number]&quot;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//=&gt;&quot;[object String]&quot;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//=&gt;&quot;[object Boolean]&quot;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//=&gt;&quot;[object Null]&quot;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//=&gt;&quot;[object Undefined]&quot;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//=&gt;&quot;[object Symbol]&quot;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//=&gt;&quot;[object BigInt]&quot;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span> xxx<span class="token operator">:</span> <span class="token string">&quot;xxx&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//=&gt;&quot;[object Object]&quot;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//=&gt;&quot;[object Array]&quot;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\d+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//=&gt;&quot;[object RegExp]&quot;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//=&gt;&quot;[object Function]&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="报错代码与-eventloop" tabindex="-1"><a class="header-anchor" href="#报错代码与-eventloop" aria-hidden="true">#</a> 报错代码与 eventloop</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;执行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Uncaught ReferenceError: a is not defined</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>可以看到第一句代码报错后，后面的代码并没有执行，这符合我们平常的开发认知</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;执行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 执行</span>\n<span class="token comment">// Uncaught ReferenceError: a is not defined</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>异步代码出错，并不会影响后面同步代码的执行，让我们来看下一个例子</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;执行1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;执行2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Uncaught ReferenceError: a is not defined</span>\n<span class="token comment">// 执行1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>结果是第一个异步代码执行了，这是 eventloop 的经典场景，js 是单线程执行的，所以出现未捕获的异常必然会导致后面的代码不执行。例子里面，代码从上往下执行，执行<code>settimeout</code>时只是把回调推进事件队列，如果前面代码就报错了，自然不会有把回调放入事件队列这个动作，所以不会执行回调。换言之，先有<code>settimeout</code>的话，已经加入到队列了，后面同步代码报错，但是事件队列里已经有这个回调了，js 线程会取队列下一个任务继续执行，所以就出现第一个定时器的代码执行了，第二个不执行。</p><p>如果我们想要保证某块可能出错的同步代码后面的代码继续执行的话，那么我们必须对这块同步代码进行异常捕获。</p>',87),b={render:function(n,s){const a=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[p,(0,t._)("blockquote",null,[(0,t._)("p",null,[e,(0,t._)("a",o,[c,(0,t.Wm)(a)])])]),l,(0,t._)("p",null,[u,(0,t._)("a",i,[r,(0,t.Wm)(a)]),k]),d],64)}}}}]);