"use strict";(self.webpackChunkmy_notes=self.webpackChunkmy_notes||[]).push([[781],{219:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-dc3b2a6e",path:"/react/",title:"React",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"定义组件",slug:"定义组件",children:[]},{level:2,title:"JSX",slug:"jsx",children:[{level:3,title:"返回单个根元素",slug:"返回单个根元素",children:[]},{level:3,title:"关闭所有标签",slug:"关闭所有标签",children:[]},{level:3,title:"camelCase 大部分的东西",slug:"camelcase-大部分的东西",children:[]},{level:3,title:"带花括号使用 JavaScript",slug:"带花括号使用-javascript",children:[]},{level:3,title:"将 props 传递给组件",slug:"将-props-传递给组件",children:[]},{level:3,title:"条件渲染",slug:"条件渲染",children:[]},{level:3,title:"渲染列表",slug:"渲染列表",children:[]},{level:3,title:"保持组件为纯函数",slug:"保持组件为纯函数",children:[]}]}],filePathRelative:"react/README.md",git:{updatedTime:1639928438e3,contributors:[]}}},9979:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="react" tabindex="-1"><a class="header-anchor" href="#react" aria-hidden="true">#</a> React</h1><h2 id="定义组件" tabindex="-1"><a class="header-anchor" href="#定义组件" aria-hidden="true">#</a> 定义组件</h2><p>React 允许您将标记、CSS 和 JavaScript 组合成自定义“组件” ，即应用程序的可重用 UI 元素。React 组件是一个 JavaScript 函数</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// App.js</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Profile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">&quot;https://i.imgur.com/MK3eW3Am.jpg&quot;</span> alt<span class="token operator">=</span><span class="token string">&quot;Katherine Johnson&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 或者</span>\n<span class="token comment">// return (</span>\n<span class="token comment">//   &lt;div&gt;</span>\n<span class="token comment">//     &lt;img src=&quot;https://i.imgur.com/MK3eW3As.jpg&quot; alt=&quot;Katherine Johnson&quot; /&gt;</span>\n<span class="token comment">//   &lt;/div&gt;</span>\n<span class="token comment">// );</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><blockquote><p>React 组件是常规的 JavaScript 函数，但它们的名称必须以大写字母开头，否则它们将不起作用！</p></blockquote><blockquote><p>如果标签与 return 语句不在同一行，则必须将其括在一对括号中，如果没有括号，后面几行的任何代码 return 都将被忽略！</p></blockquote><p>大多数 React 应用程序一直使用组件。这意味着您不仅可以将组件用于可重复使用的部分，例如按钮，还可以用于较大的部分，例如侧边栏、列表以及最终的完整页面！<strong>组件是组织 UI 代码和标记的一种便捷方式</strong>，即使其中一些仅使用一次。</p><h2 id="jsx" tabindex="-1"><a class="header-anchor" href="#jsx" aria-hidden="true">#</a> JSX</h2><p>JSX 是 JavaScript 的语法扩展，允许您在 JavaScript 文件中编写类似 HTML 的标记。React 组件用 JSX 将渲染逻辑与标记组合在一起，因为它们是相关的。</p><h3 id="返回单个根元素" tabindex="-1"><a class="header-anchor" href="#返回单个根元素" aria-hidden="true">#</a> 返回单个根元素</h3><p>要从一个组件返回多个元素，请将它们用单个父标签包裹起来</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Hedy Lamarr&#39;s Todos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>\n    ...\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>如果不想额外添加<code>&lt;div&gt;</code>，可以改为&lt;&gt;&lt;/&gt;</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>&lt;&gt;\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Hedy Lamarr&#39;s Todos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>\n    ...\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>\n&lt;/&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><blockquote><p>这个空标签称为 React 片段。React 片段让您可以对事物进行分组，而不会在浏览器 HTML 树中留下任何痕迹。JSX 看起来像 HTML，但在底层它被转换成普通的 JavaScript 对象。</p></blockquote><h3 id="关闭所有标签" tabindex="-1"><a class="header-anchor" href="#关闭所有标签" aria-hidden="true">#</a> 关闭所有标签</h3><p>JSX 需要显式关闭标签，如<code>&lt;img /&gt;</code></p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>&lt;&gt;\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span>\n    <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://i.imgur.com/yXOvdOSs.jpg<span class="token punctuation">&quot;</span></span>\n    <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Hedy Lamarr<span class="token punctuation">&quot;</span></span>\n    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>photo<span class="token punctuation">&quot;</span></span>\n   <span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Invent new traffic lights<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Rehearse a movie scene<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Improve the spectrum technology<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>\n&lt;/&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="camelcase-大部分的东西" tabindex="-1"><a class="header-anchor" href="#camelcase-大部分的东西" aria-hidden="true">#</a> camelCase 大部分的东西</h3><p><code>JSX</code> 变成了 JavaScript，用 <code>JSX</code> 编写的属性成为 JavaScript 对象的键。 JavaScript 对变量名有限制。例如，它们的名称不能包含破折号。</p><p>这就是为什么在 <code>React</code> 中，许多 <code>HTML</code> 和 <code>SVG</code> 属性都是用驼峰命名法编写的。例如，使用 <code>stroke-width</code> 代替 <code>strokeWidth</code>。因为 class 是保留字，所以在 <code>React</code> 中你可以写成 <code>className</code></p><h3 id="带花括号使用-javascript" tabindex="-1"><a class="header-anchor" href="#带花括号使用-javascript" aria-hidden="true">#</a> 带花括号使用 JavaScript</h3><p>在 JSX 中只能以两种方式使用花括号：</p><ul><li>作为直接在 JSX 标签内的文本：<code>&lt;h1&gt;{name}&#39;s To Do List&lt;/h1&gt;</code>有效，但<code>&lt;{tag}&gt;Gregorio Y. Zara&#39;s To Do List&lt;/{tag}&gt;</code> 不会。</li><li>作为紧跟在=符号之后的属性：src={avatar}将读取 avatar 变量，但 src=&quot;{avatar}&quot;将传递字符串{avatar}。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">TodoList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&quot;Gregorio Y. Zara&quot;</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span>&#39;s To Do List<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>要在 JSX 中传递 JS 对象，您必须将该对象包裹在另一对花括号中：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>person<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;Hedy Lamarr&quot;</span><span class="token punctuation">,</span> inventions<span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>当需要内联样式时，可以将一个对象传递给该 style 属性</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">TodoList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>ul\n      style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n        backgroundColor<span class="token operator">:</span> <span class="token string">&quot;black&quot;</span><span class="token punctuation">,</span>\n        color<span class="token operator">:</span> <span class="token string">&quot;pink&quot;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">}</span>\n    <span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>Improve the videophone<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>Prepare aeronautics lectures<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>Work on the alcohol<span class="token operator">-</span>fuelled engine<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>可以将多个表达式移动到一个对象中，并在您的 JSX 中的大括号内引用它们</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&quot;Gregorio Y. Zara&quot;</span><span class="token punctuation">,</span>\n  theme<span class="token operator">:</span> <span class="token punctuation">{</span>\n    backgroundColor<span class="token operator">:</span> <span class="token string">&quot;black&quot;</span><span class="token punctuation">,</span>\n    color<span class="token operator">:</span> <span class="token string">&quot;pink&quot;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">TodoList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span>person<span class="token punctuation">.</span>theme<span class="token punctuation">}</span><span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span><span class="token punctuation">{</span>person<span class="token punctuation">.</span>name<span class="token punctuation">}</span>&#39;s Todos<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="将-props-传递给组件" tabindex="-1"><a class="header-anchor" href="#将-props-传递给组件" aria-hidden="true">#</a> 将 props 传递给组件</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Avatar</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> person<span class="token punctuation">,</span> size <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>img\n      className<span class="token operator">=</span><span class="token string">&quot;avatar&quot;</span>\n      src<span class="token operator">=</span><span class="token punctuation">{</span>person<span class="token punctuation">.</span>src<span class="token punctuation">}</span>\n      alt<span class="token operator">=</span><span class="token punctuation">{</span>person<span class="token punctuation">.</span>name<span class="token punctuation">}</span>\n      width<span class="token operator">=</span><span class="token punctuation">{</span>size<span class="token punctuation">}</span>\n      height<span class="token operator">=</span><span class="token punctuation">{</span>size<span class="token punctuation">}</span>\n    <span class="token operator">/</span><span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>将所有的 props 转发给子组件</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Profile</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;card&quot;</span><span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>Avatar <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>通过 children 获取子组件</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Card</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;card&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Profile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>Card<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>Avatar\n        size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">100</span><span class="token punctuation">}</span>\n        person<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n          name<span class="token operator">:</span> <span class="token string">&quot;Katsuko Saruhashi&quot;</span><span class="token punctuation">,</span>\n          imageId<span class="token operator">:</span> <span class="token string">&quot;YfeOqp2&quot;</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">}</span>\n      <span class="token operator">/</span><span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>Card<span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>一个组件可能会随着时间的推移接收不同的 props，props 是只读的时间快照：每个渲染都会收到一个新版本的 props，</p><p>子组件不要修改 props，当需要响应用户输入（例如更改所选颜色）时，要通过设置状态</p><h3 id="条件渲染" tabindex="-1"><a class="header-anchor" href="#条件渲染" aria-hidden="true">#</a> 条件渲染</h3><p>在 React 中，可以使用 JavaScript 语法（如 if 语句、&amp;&amp;和? :运算符）有条件地呈现 JSX 。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Item</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> name<span class="token punctuation">,</span> isPacked <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>isPacked<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>li className<span class="token operator">=</span><span class="token string">&quot;item&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span> ✔<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>li className<span class="token operator">=</span><span class="token string">&quot;item&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>一个组件必须返回，如果不想显示内容，可以返回 null</p><p>也可以使用三元运算符</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">return</span> <span class="token operator">&lt;</span>li className<span class="token operator">=</span><span class="token string">&quot;item&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>isPacked <span class="token operator">?</span> name <span class="token operator">+</span> <span class="token string">&quot; ✔&quot;</span> <span class="token operator">:</span> name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>或者<code>&amp;&amp;</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">return</span> <span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>li className<span class="token operator">=</span><span class="token string">&quot;item&quot;</span><span class="token operator">&gt;</span>\n    <span class="token punctuation">{</span>name<span class="token punctuation">}</span> <span class="token punctuation">{</span>isPacked <span class="token operator">&amp;&amp;</span> <span class="token string">&quot;✔&quot;</span><span class="token punctuation">}</span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p>不要把数字放在<code>&amp;&amp;</code>左边，如果左边是 0，React 会渲染 0 而不是什么都不渲染。</p></blockquote><p>可以在 JSX 树中使用花括号嵌入变量，将先前计算的表达式嵌套在 JSX 中，这不仅适用于文本，也适用于任意 JSX</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Item</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> name<span class="token punctuation">,</span> isPacked <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> itemContent <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>isPacked<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    itemContent <span class="token operator">=</span> <span class="token operator">&lt;</span>del<span class="token operator">&gt;</span><span class="token punctuation">{</span>name <span class="token operator">+</span> <span class="token string">&quot; ✔&quot;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>del<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>li className<span class="token operator">=</span><span class="token string">&quot;item&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>itemContent<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="渲染列表" tabindex="-1"><a class="header-anchor" href="#渲染列表" aria-hidden="true">#</a> 渲染列表</h3><p>可以使用 map()，filter()方法渲染组件列表。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> chemists <span class="token operator">=</span> people<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">person</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> person<span class="token punctuation">.</span>profession <span class="token operator">===</span> <span class="token string">&quot;chemist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> listItems <span class="token operator">=</span> chemists<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">person</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token punctuation">{</span>person<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">getImageUrl</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">}</span> alt<span class="token operator">=</span><span class="token punctuation">{</span>person<span class="token punctuation">.</span>name<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span>b<span class="token operator">&gt;</span><span class="token punctuation">{</span>person<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>b<span class="token operator">&gt;</span>\n        <span class="token punctuation">{</span><span class="token string">&quot; &quot;</span> <span class="token operator">+</span> person<span class="token punctuation">.</span>profession <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">}</span>\n        known <span class="token keyword">for</span> <span class="token punctuation">{</span>person<span class="token punctuation">.</span>accomplishment<span class="token punctuation">}</span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span><span class="token punctuation">{</span>listItems<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><blockquote><p>需要为每个数组项提供一个字符串或数字作为 key ，以便在该数组中的其他项中唯一标识它</p></blockquote><p><code>&lt;&gt; &lt;/&gt;</code>段语法不允许您传递密钥，因此您需要将它们组合成一个<code>&lt;div&gt;</code>，或者使用稍长且更明确的<code>&lt;Fragment&gt;</code>语法</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Fragment <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>\n<span class="token comment">// ...</span>\n<span class="token keyword">const</span> listItems <span class="token operator">=</span> people<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">person</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>Fragment key<span class="token operator">=</span><span class="token punctuation">{</span>person<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span><span class="token punctuation">{</span>person<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">{</span>person<span class="token punctuation">.</span>bio<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">&gt;</span>\n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="保持组件为纯函数" tabindex="-1"><a class="header-anchor" href="#保持组件为纯函数" aria-hidden="true">#</a> 保持组件为纯函数</h3><p>React 假设编写的每个组件都是纯函数。这意味着在给定相同输入的情况下，React 组件必须始终返回相同的 JSX</p><p>React 提供了一种“严格模式”，在这种模式下，它在开发过程中两次调用每个组件的函数。通过两次调用组件函数，严格模式有助于找到违反纯函数的组件。严格模式在生产中没有任何影响，因此它不会降低用户的应用程序速度。要选择严格模式，可以将根组件包装到<code>&lt;React.StrictMode&gt;</code></p><p><strong>什么时候不需要纯函数？</strong></p><p>更新屏幕、开始动画、改变数据等被称为副作用。它们不是在渲染过程中发生的事情</p><p>在 React 中，副作用通常属于事件处理程序。事件处理程序是 React 在您执行某些操作时运行的函数，例如，当单击按钮时，即使在组件中定义了事件处理程序，它们也不会在渲染期间运行，所以事件处理程序不需要是纯的。</p><p>可以通过在组件中调用<code>useEffect</code>将其附加到 JSX ，这告诉 React 在渲染之后，在允许副作用的情况下稍后执行它。</p>',63),t={render:function(n,s){return p}}}}]);