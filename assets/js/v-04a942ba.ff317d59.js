"use strict";(self.webpackChunkmy_notes=self.webpackChunkmy_notes||[]).push([[97],{8215:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-04a942ba",path:"/js/knowledge-points.html",title:"知识点",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"省略http:前缀",slug:"省略http-前缀",children:[]},{level:2,title:"json 对象和普通 JS 对象的区别",slug:"json-对象和普通-js-对象的区别",children:[]},{level:2,title:"JS 如何单线程实现异步",slug:"js-如何单线程实现异步",children:[]},{level:2,title:"Tips",slug:"tips",children:[]}],filePathRelative:"js/knowledge-points.md",git:{updatedTime:1629214116e3,contributors:[]}}},635:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const e=(0,a(6252).uE)('<h1 id="知识点" tabindex="-1"><a class="header-anchor" href="#知识点" aria-hidden="true">#</a> 知识点</h1><h2 id="省略http-前缀" tabindex="-1"><a class="header-anchor" href="#省略http-前缀" aria-hidden="true">#</a> 省略<code>http:</code>前缀</h2><p>如果你对形如 <code>//cdn.com/id/app_a6976b6d.css</code> 这样的 URL 感到陌生，你需要知道这种 <code>URL</code> 省掉了前面的 <code>http:</code> 或者 <code>https:</code> 前缀， 这样做的好处时在访问这些资源的时候会自动的根据当前<code>HTML</code> 的 <code>URL</code> 是采用什么模式去决定是采用 <code>HTTP</code> 还是 <code>HTTPS</code> 模式。</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">body</span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>//cdn.com/id/arch_ae805d49.png<span class="token punctuation">)</span></span> repeat<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="json-对象和普通-js-对象的区别" tabindex="-1"><a class="header-anchor" href="#json-对象和普通-js-对象的区别" aria-hidden="true">#</a> json 对象和普通 JS 对象的区别</h2><p>JSON 是 JavaScript 原生格式，它是一种严格的 js 对象的格式，JSON 的属性名必须有<strong>双</strong>引号，如果值是字符串，也必须是<strong>双</strong>引号。</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>let obj = <span class="token punctuation">{</span><span class="token punctuation">}</span>; <span class="token comment">//这只是JS对象</span>\nlet obj2=<span class="token punctuation">{</span>&#39;width&#39;<span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span>&#39;height&#39;<span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token comment">//JS对象</span>\nlet obj3=<span class="token punctuation">{</span><span class="token property">&quot;width&quot;</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token property">&quot;height&quot;</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;rose&quot;</span><span class="token punctuation">}</span><span class="token comment">//JSON格式的JS对象</span>\n\n<span class="token comment">//json转字符串</span>\nJSON.stringify(<span class="token punctuation">{</span>\n        name<span class="token operator">:</span> &#39;苹果 X&#39;<span class="token punctuation">,</span>\n        price<span class="token operator">:</span> <span class="token number">8888</span>\n    <span class="token punctuation">}</span>\n)\n\n<span class="token comment">//字符串转json</span>\nJSON.parse(<span class="token string">&quot;{name: &#39;苹果 X&#39;,price: 8888}&quot;</span>)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="js-如何单线程实现异步" tabindex="-1"><a class="header-anchor" href="#js-如何单线程实现异步" aria-hidden="true">#</a> JS 如何单线程实现异步</h2><h2 id="tips" tabindex="-1"><a class="header-anchor" href="#tips" aria-hidden="true">#</a> Tips</h2><ul><li><code>Json</code>文件不能写注释</li><li>移动端开发为什么不使用<code>jquery</code>： 1、<code>jquery</code>体积大 2、<code>jquery</code>做了大量的兼容，移动端都是高版本浏览器，没有必要做兼容，并不是说一定不用，最好不要用</li><li><code>{color:’blue’, ’font-size’:5px}</code>对象里键名里有<code>-</code>的要加引号</li></ul>',10),p={render:function(n,s){return e}}}}]);