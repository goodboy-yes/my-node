"use strict";(self.webpackChunkmy_notes=self.webpackChunkmy_notes||[]).push([[867],{4855:(e,l,i)=>{i.r(l),i.d(l,{data:()=>t});const t={key:"v-2c58129c",path:"/knowledge-point/network.html",title:"网络",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"TCP 和 UDP 的区别，它们各有什么优点",slug:"tcp-和-udp-的区别-它们各有什么优点",children:[{level:3,title:"TCP",slug:"tcp",children:[]},{level:3,title:"UDP",slug:"udp",children:[]},{level:3,title:"区别总结",slug:"区别总结",children:[]},{level:3,title:"UDP 对 TCP 的优势",slug:"udp-对-tcp-的优势",children:[]},{level:3,title:"应用场景",slug:"应用场景",children:[]}]}],filePathRelative:"knowledge-point/network.md",git:{updatedTime:1630164673e3,contributors:[]}}},613:(e,l,i)=>{i.r(l),i.d(l,{default:()=>a});const t=(0,i(6252).uE)('<h1 id="网络" tabindex="-1"><a class="header-anchor" href="#网络" aria-hidden="true">#</a> 网络</h1><h2 id="tcp-和-udp-的区别-它们各有什么优点" tabindex="-1"><a class="header-anchor" href="#tcp-和-udp-的区别-它们各有什么优点" aria-hidden="true">#</a> TCP 和 UDP 的区别，它们各有什么优点</h2><h3 id="tcp" tabindex="-1"><a class="header-anchor" href="#tcp" aria-hidden="true">#</a> TCP</h3><p>TCP 是面向连接的通讯协议，通过三次握手建立连接，通讯完成时四次挥手</p><p><strong>优点：</strong> TCP 在数据传递时，会有三次握手来建立连接，而且在数据传递时，有确认、窗口、重传、拥塞控制机制，在数据传完后，还会断开连接用来节约系统资源，较为可靠。丢包时有重发控制，还可以对次序乱掉的分包进行顺序控制。</p><blockquote><p>TCP 在数据包接收无序、丢失或在交付期间被破坏时，负责数据恢复。它通过为其发送的每个数据包提供一个序号来完成此恢复。数据包可以沿完全不同的路径发送，即使它们都是同一消息的组成部分。为确保正确地接收数据，TCP 要求在目标计算机成功收到数据时发回一个确认（即 ACK）。如果在某个时限内未收到相应的 ACK，将重新传送数据包。如果网络拥塞，这种重新传送将导致发送的数据包重复。但是，接收计算机可使用数据包的序号来确定它是否为重复数据包，并在必要时丢弃它。</p></blockquote><p><strong>缺点：</strong> TCP 相对于 UDP 速度慢一点，要求系统资源较多。</p><h3 id="udp" tabindex="-1"><a class="header-anchor" href="#udp" aria-hidden="true">#</a> UDP</h3><p>UDP 是面向无连接的通讯协议，UDP 数据包括目的端口号和源端口号信息</p><p><strong>优点：</strong> UDP 速度快、操作简单、要求系统资源较少，由于通讯不需要连接，可以实现广播发送</p><p><strong>缺点：</strong> UDP 传送数据前并不与对方建立连接，对接收到的数据也不发送确认信号，发送端不知道数据是否会正确接收，也不重复发送，不可靠</p><h3 id="区别总结" tabindex="-1"><a class="header-anchor" href="#区别总结" aria-hidden="true">#</a> 区别总结</h3><ul><li>TCP 对系统资源要求较多，UDP 对系统资源要求较少</li><li>TCP 相对于 UDP 速度慢一点</li><li>TCP 面向连接，UDP 是无连接的，即发送数据之前不需要建立连接</li><li>TCP 保证数据正确性，UDP 可能丢包，TCP 保证数据无差错，不丢失，不重复，且按序到达，UDP 尽最大努力交付，即不保证可靠交付。</li><li>TCP 面向字节流，实际上是 TCP 把数据看成一连串无结构的字节流;UDP 是面向报文的，UDP 没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如 IP 电话，实时视频会议等）</li><li>每一条 TCP 连接只能是点到点的;UDP 支持一对一，一对多，多对一和多对多的交互通信</li><li>TCP 首部开销 20 字节;UDP 的首部开销小，只有 8 个字节</li></ul><h3 id="udp-对-tcp-的优势" tabindex="-1"><a class="header-anchor" href="#udp-对-tcp-的优势" aria-hidden="true">#</a> UDP 对 TCP 的优势</h3><p>UDP 以其简单、传输快的优势，在越来越多场景下取代了 TCP,如实时游戏。</p><ul><li><p>网速的提升给 UDP 的稳定性提供可靠网络保障，丢包率很低，如果使用应用层重传，能够确保传输的可靠性。</p></li><li><p>TCP 为了实现网络通信的可靠性，使用了复杂的拥塞控制算法，建立了繁琐的握手过程，由于 TCP 内置的系统协议栈中，极难对其进行改进。采用 TCP，一旦发生丢包，TCP 会将后续的包缓存起来，等前面的包重传并接收到后再继续发送，延时会越来越大，基于 UDP 对实时性要求较为严格的情况下，采用自定义重传机制，能够把丢包产生的延迟降到最低，尽量减少网络问题对游戏性造成影响。</p></li><li><p>UDP 传输层无法保证数据的可靠传输，只能通过应用层来实现了。实现的方式参照 tcp 可靠性传输的方式，只是实现不在传输层，实现转移到了应用层。实现确认机制、重传机制、窗口确认机制。如支持高速广域网上的海量数据传输的 UDT，互联网上的标准数据传输协议 TCP 在高带宽长距离网络上性能很差，UDT 建于 UDP 之上，并引入新的拥塞控制和数据可靠性控制机制，是面向连接的双向的应用层协议。</p></li></ul><h3 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h3><ul><li><p>比如普通的会议视频图像，当然首选 UDP，毕竟丢几包无所谓。</p></li><li><p>如果传输文件等，不能丢包，用 TCP</p></li></ul>',18),a={render:function(e,l){return t}}}}]);