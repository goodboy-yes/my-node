"use strict";(self.webpackChunkmy_notes=self.webpackChunkmy_notes||[]).push([[479],{3374:(n,a,s)=>{s.r(a),s.d(a,{data:()=>p});const p={key:"v-78aea6ef",path:"/js/code-snippet.html",title:"代码段",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"求两个整数之间的随机数",slug:"求两个整数之间的随机数",children:[]},{level:2,title:"阻止点击默认行为",slug:"阻止点击默认行为",children:[]},{level:2,title:"检查对象是否为空",slug:"检查对象是否为空",children:[]},{level:2,title:"打乱数组",slug:"打乱数组",children:[]},{level:2,title:"数组求和，最小值和最大值",slug:"数组求和-最小值和最大值",children:[]},{level:2,title:"从数组中过滤到虚值",slug:"从数组中过滤到虚值",children:[]}],filePathRelative:"js/code-snippet.md",git:{updatedTime:1630164673e3,contributors:[]}}},5524:(n,a,s)=>{s.r(a),s.d(a,{default:()=>t});const p=(0,s(6252).uE)('<h1 id="代码段" tabindex="-1"><a class="header-anchor" href="#代码段" aria-hidden="true">#</a> 代码段</h1><h2 id="求两个整数之间的随机数" tabindex="-1"><a class="header-anchor" href="#求两个整数之间的随机数" aria-hidden="true">#</a> 求两个整数之间的随机数</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//[min,max)不包含max</span>\n<span class="token keyword">function</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token parameter">min<span class="token punctuation">,</span> max</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="阻止点击默认行为" tabindex="-1"><a class="header-anchor" href="#阻止点击默认行为" aria-hidden="true">#</a> 阻止点击默认行为</h2><p><code>preventDefault()</code>阻止事件的默认行为但不支持 IE，IE 中使用 <code>returnValue</code> 阻止事件默认行为</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">stopDefault</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>preventDefault<span class="token punctuation">)</span> e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span> window<span class="token punctuation">.</span>event<span class="token punctuation">.</span>returnValue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="检查对象是否为空" tabindex="-1"><a class="header-anchor" href="#检查对象是否为空" aria-hidden="true">#</a> 检查对象是否为空</h2><p>判断对象是否等于 <code>{}</code> 都会返回 false，即使该对象为空。下面的代码可以帮助判断对象是否为空</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isEmpty</span> <span class="token operator">=</span> <span class="token parameter">obj</span> <span class="token operator">=&gt;</span> Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Object\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="打乱数组" tabindex="-1"><a class="header-anchor" href="#打乱数组" aria-hidden="true">#</a> 打乱数组</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">shuffle</span> <span class="token operator">=</span> <span class="token parameter">arr</span> <span class="token operator">=&gt;</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">0.5</span> <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="数组求和-最小值和最大值" tabindex="-1"><a class="header-anchor" href="#数组求和-最小值和最大值" aria-hidden="true">#</a> 数组求和，最小值和最大值</h2><p>我们可以利用 reduce方法快速找到基本的数学运算。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> array  <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\narray<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 求和</span>\narray<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token operator">&gt;</span>b<span class="token operator">?</span>a<span class="token operator">:</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 最大值</span>\narray<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token operator">&lt;</span>b<span class="token operator">?</span>a<span class="token operator">:</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 最小值</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="从数组中过滤到虚值" tabindex="-1"><a class="header-anchor" href="#从数组中过滤到虚值" aria-hidden="true">#</a> 从数组中过滤到虚值</h2><p>像 0, undefined, null, false, &quot;&quot;, &#39;&#39;这样的假值可以通过<code>filter</code>方法过滤掉。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\narray<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',17),t={render:function(n,a){return p}}}}]);