"use strict";(self.webpackChunkmy_notes=self.webpackChunkmy_notes||[]).push([[126],{2924:(n,a,s)=>{s.r(a),s.d(a,{data:()=>t});const t={key:"v-852f40ca",path:"/js/code-style.html",title:"代码风格",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"社区代码风格指南",slug:"社区代码风格指南",children:[]},{level:2,title:"无分号的代码风格",slug:"无分号的代码风格",children:[]}],filePathRelative:"js/code-style.md",git:{updatedTime:1629214116e3,contributors:[]}}},3869:(n,a,s)=>{s.r(a),s.d(a,{default:()=>h});var t=s(6252);const e=(0,t._)("h1",{id:"代码风格",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#代码风格","aria-hidden":"true"},"#"),(0,t.Uk)(" 代码风格")],-1),p=(0,t._)("h2",{id:"社区代码风格指南",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#社区代码风格指南","aria-hidden":"true"},"#"),(0,t.Uk)(" 社区代码风格指南")],-1),l=(0,t._)("p",null,"为了约定大家的代码风格，在社区中诞生了一些比较规范的代码风格指南：",-1),o={href:"https://github.com/airbnb/javascript",target:"_blank",rel:"noopener noreferrer"},r=(0,t.Uk)("Airbnb"),c={href:"https://github.com/standard/standard",target:"_blank",rel:"noopener noreferrer"},i=(0,t.Uk)("Standard"),u={href:"https://google.github.io/styleguide/jsguide.html",target:"_blank",rel:"noopener noreferrer"},d=(0,t.Uk)("Google"),k=(0,t.uE)('<p><strong>这三份 JavaScript 代码风格指南值得我们反复学习，掌握后，编程能力能上一大台阶。</strong></p><h2 id="无分号的代码风格" tabindex="-1"><a class="header-anchor" href="#无分号的代码风格" aria-hidden="true">#</a> 无分号的代码风格</h2><p>当采用了无分号的代码风格时，以(、[、`开头需要在前面补上一个分号用以避免一些语法解析错误。所以你会发现在一些第三方的代码中能看到一上来就以一个 ; 开头。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token punctuation">;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',4),h={render:function(n,a){const s=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[e,p,l,(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("a",o,[r,(0,t.Wm)(s)])]),(0,t._)("li",null,[(0,t._)("a",c,[i,(0,t.Wm)(s)])]),(0,t._)("li",null,[(0,t._)("a",u,[d,(0,t.Wm)(s)])])]),k],64)}}}}]);