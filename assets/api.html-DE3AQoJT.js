import{_ as n,o as s,c as a,e}from"./app-ZrMgA43q.js";const t={},p=e(`<h1 id="api" tabindex="-1"><a class="header-anchor" href="#api"><span>API</span></a></h1><h2 id="全局" tabindex="-1"><a class="header-anchor" href="#全局"><span>全局</span></a></h2><h3 id="purecomponent" tabindex="-1"><a class="header-anchor" href="#purecomponent"><span>PureComponent</span></a></h3><p><code>React.PureComponent</code> 与 <code>React.Component</code> 的区别在于 <code>React.Component</code> 并未实现 <code>shouldComponentUpdate()</code>，而 <code>React.PureComponent</code> 中以<strong>浅层对比</strong> <code>prop</code> 和 <code>state</code> 的方式来实现了该函数。如果赋予 React 组件相同的 <code>props</code> 和 <code>state</code>，<code>render()</code> 函数会渲染相同的内容</p><h3 id="memo" tabindex="-1"><a class="header-anchor" href="#memo"><span>memo</span></a></h3><p><code>React.memo</code> 为高阶组件。</p><p>如果你的组件在相同 props 的情况下渲染相同的结果，那么你可以通过将其包装在 <code>React.memo</code> 中调用，以此通过记忆组件渲染结果的方式来提高组件的性能表现。</p><p>这意味着在这种情况下，React 将跳过渲染组件的操作并直接复用最近一次渲染的结果。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> MyComponent <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">/* 使用 props 渲染 */</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>React.memo</code> 仅检查 <code>props</code> 变更。如果函数组件拥有 <code>useState</code>，<code>useReducer</code> 或 <code>useContext</code> 的 Hook，当 <code>state</code> 或 <code>context</code> 发生变化时，它仍会重新渲染。</p><p>默认情况下其只会对复杂对象做浅层对比，如果想要控制对比过程，可通过第二个参数传入来实现。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">/* 使用 props 渲染 */</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">areEqual</span><span class="token punctuation">(</span><span class="token parameter">prevProps<span class="token punctuation">,</span> nextProps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">/*
  如果把 nextProps 传入 render 方法的返回结果与
  将 prevProps 传入 render 方法的返回结果一致则返回 true，
  否则返回 false
  */</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">,</span> areEqual<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法与 <code>shouldComponentUpdate</code> 相反：如果返回的是 true，那么表示不重新渲染，如果返回的是 false，那么要重新渲染。</p><h3 id="cloneelement" tabindex="-1"><a class="header-anchor" href="#cloneelement"><span>cloneElement()</span></a></h3><p>以 <code>element</code> 元素为样板克隆并返回新的 React 元素。config 中应包含新的 <code>props</code>，<code>key</code> 或 <code>ref</code>。返回元素的 <code>props</code> 是将新的 <code>props</code> 与原始元素的 <code>props</code> 浅层合并后的结果。新的子元素将取代现有的子元素，如果在 config 中未出现 <code>key</code> 或 <code>ref</code>，那么原始元素的 <code>key</code> 和 <code>ref</code> 将被保留。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code>React<span class="token punctuation">.</span><span class="token function">cloneElement</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token punctuation">[</span>config<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span>children<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 等同于</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>element.type</span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>element<span class="token punctuation">.</span>props<span class="token punctuation">}</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>element.type</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当通过 <code>ref</code> 获取子节点时，你将不会意外地从你祖先节点上窃取它。相同的 <code>ref</code> 将添加到克隆后的新元素中</p><h3 id="isvalidelement" tabindex="-1"><a class="header-anchor" href="#isvalidelement"><span>isValidElement()</span></a></h3><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code>React<span class="token punctuation">.</span><span class="token function">isValidElement</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>验证对象是否为 React 元素，返回值为 true 或 false。</p><h3 id="createref" tabindex="-1"><a class="header-anchor" href="#createref"><span>createRef</span></a></h3><p><code>React.createRef</code> 创建一个能够通过 <code>ref</code> 属性附加到 <code>React</code> 元素的 <code>ref</code>。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>inputRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>inputRef<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>inputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="forwardref" tabindex="-1"><a class="header-anchor" href="#forwardref"><span>forwardRef</span></a></h4><p><code>React.forwardRef</code> 会创建一个 <code>React</code> 组件，这个组件能够将其接受的 <code>ref</code> 属性转发到其组件树下的另一个组件中。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> FancyButton <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">forwardRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> ref</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>FancyButton<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// You can now get a ref directly to the DOM button:</span>
<span class="token keyword">const</span> ref <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FancyButton</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Click me!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">FancyButton</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lazy" tabindex="-1"><a class="header-anchor" href="#lazy"><span>lazy</span></a></h3><p><code>React.lazy()</code> 允许你定义一个动态加载的组件。这有助于缩减 <code>bundle</code> 的体积，并延迟加载在初次渲染时未用到的组件。</p><p>渲染 lazy 组件依赖该组件渲染树上层的 <code>&lt;React.Suspense&gt;</code> 组件</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token comment">// 该组件是动态加载的</span>
<span class="token keyword">const</span> OtherComponent <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;./OtherComponent&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token comment">// 显示 &lt;Spinner&gt; 组件直至 OtherComponent 加载完成</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">React.Suspense</span></span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Spinner</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">OtherComponent</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">React.Suspense</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期"><span>生命周期</span></a></h2><p><code>React</code> 的组件可以定义为 <code>class</code> 或函数的形式。在 <code>React.Component</code> 的子类中有个必须定义的 <code>render()</code> 函数。</p><p><strong>挂载阶段</strong></p><p>当组件实例被创建并插入 DOM 中时，其生命周期调用顺序如下：</p><ul><li><code>constructor()</code></li><li><code>static getDerivedStateFromProps()</code></li><li><code>render()</code></li><li><code>componentDidMount()</code></li></ul><p><strong>更新阶段</strong></p><p>当组件的 props 或 state 发生变化时会触发更新。组件更新的生命周期调用顺序如下：</p><ul><li><code>static getDerivedStateFromProps()</code></li><li><code>shouldComponentUpdate()</code></li><li><code>render()</code></li><li><code>getSnapshotBeforeUpdate()</code></li><li><code>componentDidUpdate()</code></li></ul><p><strong>卸载阶段</strong></p><p>当组件从 DOM 中移除时会调用如下方法：</p><ul><li><code>componentWillUnmount()</code></li></ul><p><strong>错误处理</strong></p><p>当渲染过程，生命周期，或子组件的构造函数中抛出错误时，会调用如下方法：</p><ul><li><code>static getDerivedStateFromError()</code></li><li><code>componentDidCatch()</code></li></ul><h3 id="render" tabindex="-1"><a class="header-anchor" href="#render"><span>render</span></a></h3><p>render() 方法是 class 组件中唯一必须实现的方法。它会返回以下内容</p><ul><li>React 元素。通常通过 JSX 创建。例如，<code>&lt;div /&gt;</code> 会被 React 渲染为 DOM 节点，<code>&lt;MyComponent /&gt;</code> 会被 React 渲染为自定义组件，无论是 <code>&lt;div /&gt;</code> 还是 <code>&lt;MyComponent /&gt;</code> 均为 React 元素。</li><li>数组或 fragments。 使得 render 方法可以返回多个元素。欲了解更多详细信息，请参阅 fragments 文档。</li><li>Portals。可以渲染子节点到不同的 DOM 子树中。欲了解更多详细信息，请参阅有关 portals 的文档。</li><li>字符串或数值类型。它们在 DOM 中会被渲染为文本节点。</li><li>布尔类型或 null。什么都不渲染。（主要用于支持返回 test &amp;&amp; <code>&lt;Child /&gt;</code> 的模式，其中 test 为布尔类型。)</li></ul><p><code>render()</code> 函数应该为纯函数，并且它不会直接与浏览器交互。如需与浏览器进行交互，请在 <code>componentDidMount()</code> 或其他生命周期方法中执行你的操作。</p><p><strong>如果 <code>shouldComponentUpdate()</code> 返回 false，则不会调用 <code>render()</code>。</strong></p><h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor"><span>constructor()</span></a></h3><p>如果不初始化 <code>state</code> 或不进行方法绑定，则不需要为 <code>React</code> 组件实现构造函数。</p><p>在为 <code>React.Component</code> 子类实现构造函数时，应在其他语句之前调用 <code>super(props)</code>。否则，<code>this.props</code> 在构造函数中可能会出现未定义的 bug。</p><p>在 <code>constructor()</code> 函数中直接为 <code>this.state</code> 赋值初始 <code>state</code>。在其他方法中赋值应使用 <code>this.setState()</code></p><p>要避免在构造函数中引入任何副作用或订阅。如遇到此场景，请将对应的操作放置在 <code>componentDidMount</code> 中。</p><h3 id="componentdidmount" tabindex="-1"><a class="header-anchor" href="#componentdidmount"><span>componentDidMount()</span></a></h3><p><code>componentDidMount()</code> 会在<strong>组件挂载后</strong>（插入 DOM 树中）立即调用。<strong>依赖于 DOM 节点的初始化应该放在这</strong>里。如需通过网络请求获取数据，此处是实例化请求的好地方。</p><p>如果在<code>componentDidMount()</code> 添加了订阅，请不要忘记在 <code>componentWillUnmount()</code> 里取消订阅</p><p>可以在 <code>componentDidMount()</code> 里直接调用 <code>setState()</code>。它将触发额外渲染，但<strong>此渲染会发生在浏览器更新屏幕之前</strong>。如此保证了即使在 <code>render()</code> 两次调用的情况下，用户也不会看到中间状态。<strong>请谨慎使用该模式，因为它会导致性能问题。</strong></p><p><strong>通常应该在 <code>constructor()</code> 中初始化 state</strong>。如果渲染依赖于 DOM 节点的大小或位置，比如实现 modals 和 tooltips 等情况下，可以使用此方式处理</p><h3 id="componentdidupdate" tabindex="-1"><a class="header-anchor" href="#componentdidupdate"><span>componentDidUpdate()</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">componentDidUpdate</span><span class="token punctuation">(</span>prevProps<span class="token punctuation">,</span> prevState<span class="token punctuation">,</span> snapshot<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>componentDidUpdate()</code> 会在更新后会被立即调用。首次渲染不会执行此方法。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token parameter">prevProps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 典型用法（不要忘记比较 props）：</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>userID <span class="token operator">!==</span> prevProps<span class="token punctuation">.</span>userID<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>userID<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以在 <code>componentDidUpdate()</code> 中直接调用 <code>setState()</code>，但请注意它必须被包裹在一个条件语句里，否则会导致死循环。</p><blockquote><p>如果 shouldComponentUpdate() 返回值为 false，则不会调用 componentDidUpdate()。</p></blockquote><h3 id="componentwillunmount" tabindex="-1"><a class="header-anchor" href="#componentwillunmount"><span>componentWillUnmount()</span></a></h3><p><code>componentWillUnmount()</code> 会在组件卸载及销毁之前直接调用。在此方法中执行必要的清理操作，例如，清除 timer，取消网络请求或清除在 <code>componentDidMount()</code> 中创建的订阅等。</p><h3 id="shouldcomponentupdate" tabindex="-1"><a class="header-anchor" href="#shouldcomponentupdate"><span>shouldComponentUpdate()</span></a></h3><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">,</span> nextState<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当 <code>props</code> 或 <code>state</code> 发生变化时，<code>shouldComponentUpdate()</code> 会在渲染执行之前被调用。返回值默认为 true。首次渲染或使用 <code>forceUpdate()</code> 时不会调用该方法。</p><p>返回 <code>false</code> 以告知 <code>React</code> 可以跳过更新。请注意，返回 <code>false</code> 并不会阻止子组件在 <code>state</code> 更改时重新渲染。</p><h2 id="其他-api" tabindex="-1"><a class="header-anchor" href="#其他-api"><span>其他 API</span></a></h2><h3 id="setstate" tabindex="-1"><a class="header-anchor" href="#setstate"><span>setState()</span></a></h3><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token function">setState</span><span class="token punctuation">(</span>updater<span class="token punctuation">[</span><span class="token punctuation">,</span> callback<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>setState()</code> 将对组件 <code>state</code> 的更改排入队列，并通知 <code>React</code> 需要使用更新后的 <code>state</code> 重新渲染此组件及其子组件。这是用于更新用户界面以响应事件处理器和处理服务器数据的主要方式</p><p><code>React</code> 会延迟调用<code>setState()</code>，需要强制 DOM 更新同步应用时可以使用 <code>flushSync</code> 来包装它，</p><p>参数一为带有形式参数的 <code>updater</code> 函数：</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> stateChange<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>state</code> 是对应用变化时组件状态的引用。它不应直接被修改。应该使用基于 <code>state</code> 和 <code>props</code> 构建的新对象来表示变化</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">counter</span><span class="token operator">:</span> state<span class="token punctuation">.</span>counter <span class="token operator">+</span> props<span class="token punctuation">.</span>step <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>updater</code> 函数中接收的 <code>state</code> 和 <code>props</code> 都保证为最新。<code>updater</code> 的返回值会与 <code>state</code> 进行浅合并。</p><p><code>setState()</code> 的第一个参数除了接受函数外，还可以接受对象类型：</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token function">setState</span><span class="token punctuation">(</span>stateChange<span class="token punctuation">[</span><span class="token punctuation">,</span> callback<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>stateChange</code> 会将传入的对象浅层合并到新的 <code>state</code>。这种形式的 <code>setState()</code> 也是异步的，并且在同一周期内会对多个 <code>setState</code> 进行批处理。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">quantity</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>setState()</code> 的第二个参数为可选的回调函数，它将<strong>在 <code>setState</code> 完成合并并重新渲染组件后执行</strong>。建议使用 <code>componentDidUpdate()</code> 来代替此方式。</p><h3 id="forceupdate" tabindex="-1"><a class="header-anchor" href="#forceupdate"><span>forceUpdate()</span></a></h3><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code>component<span class="token punctuation">.</span><span class="token function">forceUpdate</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>默认情况下，当组件的 <code>state</code> 或 <code>props</code> 发生变化时，组件将重新渲染。如果 <code>render()</code> 方法依赖于其他数据，则可以调用 <code>forceUpdate()</code> 强制让组件重新渲染。</p><p>调用 <code>forceUpdate()</code> 将致使组件调用 <code>render()</code> 方法，此操作会跳过该组件的 <code>shouldComponentUpdate()</code>。但其子组件会触发正常的生命周期方法</p><p>避免使用 <code>forceUpdate()</code>，尽量在 <code>render()</code> 中使用 <code>this.props</code> 和 <code>this.state</code>。</p><h2 id="class-属性" tabindex="-1"><a class="header-anchor" href="#class-属性"><span>Class 属性</span></a></h2><h3 id="defaultprops" tabindex="-1"><a class="header-anchor" href="#defaultprops"><span>defaultProps</span></a></h3><p><code>defaultProps</code> 可以为 <code>Class</code> 组件添加默认 <code>props</code>。这一般用于 <code>props</code> 未赋值，但又不能为 null 的情况</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">class</span> <span class="token class-name">CustomButton</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

CustomButton<span class="token punctuation">.</span>defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&quot;blue&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CustomButton</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token punctuation">;</span> <span class="token comment">// props.color 将设置为 &#39;blue&#39;</span>
<span class="token punctuation">}</span>

<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CustomButton</span></span> <span class="token attr-name">color</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">null</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token punctuation">;</span> <span class="token comment">// props.color 将保持是 null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reactdom" tabindex="-1"><a class="header-anchor" href="#reactdom"><span>ReactDOM</span></a></h2><p>react-dom 包导出了如下这些方法：</p><ul><li><code>createPortal()</code></li><li><code>flushSync()</code></li></ul><h3 id="createportal" tabindex="-1"><a class="header-anchor" href="#createportal"><span>createPortal()</span></a></h3><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token function">createPortal</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建 <code>portal</code>。<code>Portal</code> 提供了一种将子节点渲染到已 DOM 节点中的方式，该节点存在于 DOM 组件的层次结构之外。</p><h3 id="flushsync" tabindex="-1"><a class="header-anchor" href="#flushsync"><span>flushSync()</span></a></h3><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token function">flushSync</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>强制 <code>React</code> 同步刷新提供的回调函数中的任何更新。这确保了 DOM 会被立即 更新。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token function">flushSync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>flushSync 会对性能产生很大影响。尽量少用。</p></blockquote><h2 id="合成事件" tabindex="-1"><a class="header-anchor" href="#合成事件"><span>合成事件</span></a></h2><p><code>SyntheticEvent</code> 实例是将被传递给你的事件处理函数，它是浏览器的原生事件的跨浏览器包装器。除兼容所有浏览器外，它还拥有和浏览器原生事件相同的接口</p><p>当你需要使用浏览器的底层事件时，只需要使用 <code>nativeEvent</code> 属性来获取即可。例如，在 <code>onMouseLeave</code> 事件中 <code>event.nativeEvent</code> 将指向 <code>mouseout</code> 事件。</p><p><code>React</code> 通过将事件规范化以让他们在不同浏览器中拥有一致的属性。一般事件处理函数在冒泡阶段被触发。如需注册捕获阶段的事件处理函数，则应为事件名添加 <code>Capture</code>。例如，处理捕获阶段的点击事件请使用 <code>onClickCapture</code>，而不是 <code>onClick</code>。</p>`,111),o=[p];function c(l,i){return s(),a("div",null,o)}const u=n(t,[["render",c],["__file","api.html.vue"]]),r=JSON.parse('{"path":"/react/api.html","title":"API","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"全局","slug":"全局","link":"#全局","children":[{"level":3,"title":"PureComponent","slug":"purecomponent","link":"#purecomponent","children":[]},{"level":3,"title":"memo","slug":"memo","link":"#memo","children":[]},{"level":3,"title":"cloneElement()","slug":"cloneelement","link":"#cloneelement","children":[]},{"level":3,"title":"isValidElement()","slug":"isvalidelement","link":"#isvalidelement","children":[]},{"level":3,"title":"createRef","slug":"createref","link":"#createref","children":[]},{"level":3,"title":"lazy","slug":"lazy","link":"#lazy","children":[]}]},{"level":2,"title":"生命周期","slug":"生命周期","link":"#生命周期","children":[{"level":3,"title":"render","slug":"render","link":"#render","children":[]},{"level":3,"title":"constructor()","slug":"constructor","link":"#constructor","children":[]},{"level":3,"title":"componentDidMount()","slug":"componentdidmount","link":"#componentdidmount","children":[]},{"level":3,"title":"componentDidUpdate()","slug":"componentdidupdate","link":"#componentdidupdate","children":[]},{"level":3,"title":"componentWillUnmount()","slug":"componentwillunmount","link":"#componentwillunmount","children":[]},{"level":3,"title":"shouldComponentUpdate()","slug":"shouldcomponentupdate","link":"#shouldcomponentupdate","children":[]}]},{"level":2,"title":"其他 API","slug":"其他-api","link":"#其他-api","children":[{"level":3,"title":"setState()","slug":"setstate","link":"#setstate","children":[]},{"level":3,"title":"forceUpdate()","slug":"forceupdate","link":"#forceupdate","children":[]}]},{"level":2,"title":"Class 属性","slug":"class-属性","link":"#class-属性","children":[{"level":3,"title":"defaultProps","slug":"defaultprops","link":"#defaultprops","children":[]}]},{"level":2,"title":"ReactDOM","slug":"reactdom","link":"#reactdom","children":[{"level":3,"title":"createPortal()","slug":"createportal","link":"#createportal","children":[]},{"level":3,"title":"flushSync()","slug":"flushsync","link":"#flushsync","children":[]}]},{"level":2,"title":"合成事件","slug":"合成事件","link":"#合成事件","children":[]}],"git":{"updatedTime":1708502740000,"contributors":[{"name":"guokc","email":"guokc@tsintergy.com","commits":1}]},"filePathRelative":"react/api.md"}');export{u as comp,r as data};
