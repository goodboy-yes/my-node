import{_ as r,r as n,o,c as i,a as e,b as a,d as s,e as c}from"./app-ZrMgA43q.js";const d={},l=c(`<h1 id="git-reset-和-git-revert-的区别" tabindex="-1"><a class="header-anchor" href="#git-reset-和-git-revert-的区别"><span>git reset 和 git revert 的区别</span></a></h1><h2 id="git-reset" tabindex="-1"><a class="header-anchor" href="#git-reset"><span>git reset</span></a></h2><p>reset 用于回退版本，有三种模式，soft、mixed、hard <img src="https://upload-images.jianshu.io/upload_images/4428238-fcad08ebe26933a6.png?imageMogr2/auto-orient/strip|imageView2/2/w/638/format/webp" alt=""></p><h3 id="hard" tabindex="-1"><a class="header-anchor" href="#hard"><span>--hard</span></a></h3><p><strong>重置 stage 区和工作目录</strong></p><p><code>reset --hard</code> 会在重置 HEAD 和 branch 的同时，重置 stage 区和工作目录里的内容。当你在 reset 后面加了 --hard 参数时，你的 stage 区和工作目录里的内容会被完全重置为和 HEAD 的新位置相同的内容。换句话说，就是你的没有 commit 的修改会被全部擦掉。</p><h3 id="soft" tabindex="-1"><a class="header-anchor" href="#soft"><span>--soft</span></a></h3><p><strong>保留工作目录，并把重置 HEAD 所带来的新的差异放进暂存区</strong></p><p><code>reset --soft</code> 会在重置 HEAD 和 branch 时，保留工作目录和暂存区中的内容，并把重置 HEAD 所带来的新的差异放进暂存区。</p><h3 id="mixed" tabindex="-1"><a class="header-anchor" href="#mixed"><span>--mixed</span></a></h3><p><strong>保留工作目录，并清空暂存区</strong></p><p><code>reset</code> 如果不加参数，那么默认使用 <code>--mixed</code> 参数。它的行为是：保留工作目录，并且清空暂存区。也就是说，工作目录的修改、暂存区的内容以及由 reset 所导致的新的文件差异，都会被放进工作目录。简而言之，就是「把所有差异都混合（mixed）放在工作目录中」。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>实质上，<code>reset</code> 这个指令虽然可以用来撤销 commit ，但它的实质行为并不是撤销，而是移动 HEAD ，并且「捎带」上 HEAD 所指向的 branch（如果有的话）。</p><p>而<code>reset --hard HEAD^</code>之所以起到了撤销 commit 的效果，是因为它把 HEAD 和它所指向的 branch 一起移动到了当前 commit 的父 commit 上，从而起到了「撤销」的效果：</p><h3 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h3><ul><li><strong>--hard</strong>：要放弃目前本地的所有改变,抛弃目标节点后的所有 commit</li><li><strong>--soft</strong>：想合并「当前节点」与「reset 目标节点」之间不具太大意义的 commit 记录，假如你需要把频繁提交的 commit 整合成一个 commit 的时候</li><li><strong>--mixed（默认）</strong>：与--soft 类似，再次提交多了 git add 添加到暂存区的操作</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> reset --<span class="token operator">&lt;</span>参数<span class="token operator">&gt;</span> HEAD^ //回退到上一个提交
<span class="token function">git</span> reset --<span class="token operator">&lt;</span>参数<span class="token operator">&gt;</span> HEAD~n //回退到前n次提交
<span class="token function">git</span> reset --<span class="token operator">&lt;</span>参数<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>hash-id<span class="token operator">&gt;</span> //回退到指定提交
<span class="token function">git</span> reset --<span class="token operator">&lt;</span>参数<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>someOtherBranch<span class="token operator">&gt;</span> //重置本地分支以指向另一个分支
<span class="token function">git</span> reset <span class="token parameter variable">--hard</span> origin/master //将本地 master 分支重置为远程 master 分支，用于舍弃本地在master做的提交
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="git-revert" tabindex="-1"><a class="header-anchor" href="#git-revert"><span>git revert</span></a></h2><p>在当前提交后面，新增一次提交，抵消掉上一次提交导致的所有变化，不会改变过去的历史，主要是用于安全地取消过去发布的提交</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> revert <span class="token operator">&lt;</span>commit_id<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="revert-合并提交" tabindex="-1"><a class="header-anchor" href="#revert-合并提交"><span>revert 合并提交</span></a></h3><p>合并提交通常无法 <code>revert</code>，合并提交是两条分支的交集节点，而 git 不知道需要撤销的哪一条分支，需要添加参数 <code>-m</code> 指定主线分支，保留主线分支的代码，另一条则被撤销。</p><p>-m 后面要跟一个 parent number 标识出&quot;主线&quot;，一般使用 1 保留主分支代码。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> revert <span class="token parameter variable">-m</span> <span class="token number">1</span> <span class="token operator">&lt;</span>commitHash<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 <code>master</code> 分支 <code>revert</code> 合并提交后，然后切到 <code>feature</code> 分支修复好 <code>bug</code>，再合并到 <code>master</code> 分支时，会发现之前被 <code>revert</code> 的修改内容没有重新合并进来。</p><p>因为使用 <code>revert</code> 后， <code>feature</code> 分支的 <code>commit</code> 还是会保留在 <code>master</code> 分支的记录中，当你再次合并进去时，<code>git</code> 判断有相同的 <code>commitHash</code>，就忽略了相关 <code>commit</code> 修改的内容。</p><p>这时就需要 <code>revert</code> 掉之前 <code>revert</code> 的合并提交</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> revert <span class="token operator">&lt;</span>之前revert合并提交的commitHash<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="区别" tabindex="-1"><a class="header-anchor" href="#区别"><span>区别</span></a></h2><ul><li><code>git revert</code> 是用一次新的 commit 来回滚之前的 commit，<code>git reset</code> 是直接删除指定的 commit</li><li><code>git reset</code> 是把 HEAD 向后移动了一下，而 <code>git revert</code> 是 HEAD 继续前进，只是新的 commit 的内容和要 revert 的内容正好相反，能够抵消要被 revert 的内容</li><li>在回滚这一操作上看，效果差不多。<strong>但是在日后继续 merge 以前的老版本时有区别</strong><ul><li><code>git revert</code> 是用一次逆向的 commit“中和”之前的提交，因此日后合并老的 branch 时，之前提交合并的代码仍然存在，导致不能够重新合并</li><li><code>git reset</code> 是之间把某些 commit 在某个 branch 上删除，因而和老的 branch 再次 merge 时，这些被回滚的 commit 应该还会被引入</li></ul></li></ul><p><strong>参考文章：</strong></p>`,32),p={href:"https://www.jianshu.com/p/c2ec5f06cf1a",target:"_blank",rel:"noopener noreferrer"},h={href:"https://mp.weixin.qq.com/s/Z3kLQz67omQdT8GA5LsC7g",target:"_blank",rel:"noopener noreferrer"};function m(g,v){const t=n("ExternalLinkIcon");return o(),i("div",null,[l,e("p",null,[e("a",p,[a("Git Reset 三种模式"),s(t)])]),e("p",null,[e("a",h,[a("面试官：说说你对 git reset 和 git revert 的理解？区别？"),s(t)])])])}const b=r(d,[["render",m],["__file","reset-and-revert.html.vue"]]),k=JSON.parse('{"path":"/git/reset-and-revert.html","title":"git reset 和 git revert 的区别","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"git reset","slug":"git-reset","link":"#git-reset","children":[{"level":3,"title":"--hard","slug":"hard","link":"#hard","children":[]},{"level":3,"title":"--soft","slug":"soft","link":"#soft","children":[]},{"level":3,"title":"--mixed","slug":"mixed","link":"#mixed","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":3,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]}]},{"level":2,"title":"git revert","slug":"git-revert","link":"#git-revert","children":[{"level":3,"title":"revert 合并提交","slug":"revert-合并提交","link":"#revert-合并提交","children":[]}]},{"level":2,"title":"区别","slug":"区别","link":"#区别","children":[]}],"git":{"updatedTime":1708502740000,"contributors":[{"name":"guokc","email":"guokc@tsintergy.com","commits":1}]},"filePathRelative":"git/reset-and-revert.md"}');export{b as comp,k as data};
