import{_ as r,r as l,o,c as p,a as e,b as a,d as s,e as t}from"./app-ZrMgA43q.js";const i={},c=t('<h1 id="vite" tabindex="-1"><a class="header-anchor" href="#vite"><span>Vite</span></a></h1><h2 id="为什么选择-vite" tabindex="-1"><a class="header-anchor" href="#为什么选择-vite"><span>为什么选择 vite</span></a></h2><p>在浏览器支持 ES 模块之前，开发者没有以模块化的方式开发 JavaScript 的原生机制。这也是 “打包” 这个概念出现的原因：使用工具抓取、处理和链接我们的源码模块到文件中，使其可以运行在浏览器中。</p><p>Vite 旨在利用生态系统中的新进展解决问题：浏览器开始原生支持 ES 模块，越来越多 JavaScript 工具使用编译型语言编写。</p><h3 id="极速的服务启动" tabindex="-1"><a class="header-anchor" href="#极速的服务启动"><span>极速的服务启动</span></a></h3><p>当冷启动开发服务器时，<strong>基于打包器的方式</strong>是在提供服务前去急切地抓取和构建你的整个应用。</p><p>Vite 通过在一开始将应用中的模块区分为 <strong>依赖</strong> 和 <strong>源码</strong> 两类</p>',7),d=e("p",null,[e("strong",null,"依赖"),a(" 大多为纯 JavaScript 并在开发时不会变动。一些较大的依赖（例如有上百个模块的组件库）处理的代价也很高。依赖也通常会以某些方式（例如 ESM 或者 CommonJS）被拆分到大量小模块中。")],-1),u={href:"https://esbuild.github.io/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://vitejs.cn/guide/dep-pre-bundling.html",target:"_blank",rel:"noopener noreferrer"},h=e("p",null,[e("strong",null,"源码"),a(" 通常包含一些并非直接是 JavaScript 的文件，需要转换（例如 JSX，CSS 或者 Vue/Svelte 组件），时常会被编辑。同时，并不是所有的源码都需要同时被加载。（例如基于路由拆分的代码模块）。")],-1),k={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules",target:"_blank",rel:"noopener noreferrer"},m=t('<h3 id="轻量快速的热重载" tabindex="-1"><a class="header-anchor" href="#轻量快速的热重载"><span>轻量快速的热重载</span></a></h3><p><strong>一些打包器的开发服务器</strong>支持了动态模块热重载（HMR）：允许一个模块 “热替换” 它自己，而对页面其余部分没有影响。这大大改进了开发体验 - 然而，在实践中我们发现，即使是 HMR 更新速度也会随着应用规模的增长而显著下降。</p><p><strong>在 Vite 中</strong>，HMR 是在原生 ESM 上执行的。当编辑一个文件时，Vite 只需要精确地使已编辑的模块与其最近的 HMR 边界之间的链失效（大多数时候只需要模块本身），使 HMR 更新始终快速，无论应用的大小。</p><p>Vite 同时利用 HTTP 头来加速整个页面的重新加载（再次让浏览器为我们做更多事情）：源码模块的请求会根据 <code>304 Not Modified</code> 进行协商缓存，而依赖模块请求则会通过 <code>Cache-Control: max-age=31536000,immutable</code> 进行强缓存，因此一旦被缓存它们将不需要再次请求。</p><h3 id="为什么生产环境仍需打包" tabindex="-1"><a class="header-anchor" href="#为什么生产环境仍需打包"><span>为什么生产环境仍需打包</span></a></h3>',5),g=e("p",null,"为什么生产环境仍需打包",-1),b=e("p",null,"尽管原生 ESM 现在得到了广泛支持，但由于嵌套导入会导致额外的网络往返，在生产环境中发布未打包的 ESM 仍然效率低下（即使使用 HTTP/2）。为了在生产环境中获得最佳的加载性能，最好还是将代码进行 tree-shaking、懒加载和 chunk 分割（以获得更好的缓存）。",-1),_={href:"https://vitejs.cn/guide/features.html#build-optimizations",target:"_blank",rel:"noopener noreferrer"},f={href:"https://vitejs.cn/guide/build.html",target:"_blank",rel:"noopener noreferrer"},j=e("li",null,[e("p",null,"为何不用 ESBuild 打包？"),e("p",null,[a("虽然 "),e("code",null,"esbuild"),a(" 快得惊人，并且已经是一个在构建库方面比较出色的工具，但一些针对构建应用的重要功能仍然还在持续开发中 —— 特别是代码分割和 CSS 处理方面。就目前来说，"),e("strong",null,"Rollup"),a(" 在应用打包方面更加成熟和灵活。尽管如此，当未来这些功能稳定后，我们也不排除使用 "),e("code",null,"esbuild"),a(" 作为生产构建器的可能。")])],-1),S=e("h2",{id:"使用",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#使用"},[e("span",null,"使用")])],-1),V=e("p",null,[a('Vite (法语意为 "快速的"，发音 '),e("code",null,"/vit/"),a(") 是一种新型前端构建工具，能够显著提升前端开发体验。它主要由两部分组成：")],-1),x={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules",target:"_blank",rel:"noopener noreferrer"},y={href:"https://vitejs.cn/guide/features.html",target:"_blank",rel:"noopener noreferrer"},M={href:"https://vitejs.cn/guide/features.html#hot-module-replacement",target:"_blank",rel:"noopener noreferrer"},E={href:"https://rollupjs.org/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://nodejs.org/en/",target:"_blank",rel:"noopener noreferrer"},J=t(`<h3 id="搭建项目" tabindex="-1"><a class="header-anchor" href="#搭建项目"><span>搭建项目</span></a></h3><p>使用 NPM:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>npm init @vitejs<span class="token operator">/</span>app
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 Yarn:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>yarn create @vitejs<span class="token operator">/</span>app
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后按照提示操作即可！</p><p>你还可以通过附加的命令行选项直接指定项目名称和你想要使用的模板。例如，要构建一个 Vite + Vue 项目，运行:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code># npm <span class="token number">6</span><span class="token punctuation">.</span>x
npm init @vitejs<span class="token operator">/</span>app my<span class="token operator">-</span>vue<span class="token operator">-</span>app <span class="token operator">--</span>template vue

# npm <span class="token number">7</span><span class="token operator">+</span><span class="token punctuation">,</span> 需要额外的双横线：
npm init @vitejs<span class="token operator">/</span>app my<span class="token operator">-</span>vue<span class="token operator">-</span>app <span class="token operator">--</span> <span class="token operator">--</span>template vue

# yarn
yarn create @vitejs<span class="token operator">/</span>app my<span class="token operator">-</span>vue<span class="token operator">-</span>app <span class="token operator">--</span>template vue
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>拓展：npm init @vitejs/app 到底干了什么</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>npm init @vitejs<span class="token operator">/</span>app <span class="token operator">-</span><span class="token operator">&gt;</span> npx @vitejs<span class="token operator">/</span>create<span class="token operator">-</span>app
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>create-app 的执行入口文件执行了以下操作</p><ul><li>第一步：确定 Project name ，用户输入或默认；</li><li>第二步：检查本地是否存在同名目录，并判断是否为空目录；</li><li>第三步：选择要创建的模板，vue、vue-ts、react 等；</li><li><strong>第四部（核心）：根据选择的模板匹配到项目下以 <code>template-</code> 开头的目录，将目录中的所有文件拷贝到本地项目目录中；</strong></li><li>第五步：拷贝修改完 name 的新 package.json 到新项目中，并提示安装依赖和运行；</li></ul><p>我们使用 <code>vue create</code> 来创建项目时，背后是 Vue-CLI 给予我们的能力。所以我们得首先安装 Vue-Cli，然后才可以使用它来创建项目。而 <code>npm init</code> 则跳过了 CLI 这部分，它基于指定脚本来实现。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>yarn create <span class="token operator">&lt;</span>starter<span class="token operator">-</span>kit<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>args<span class="token operator">&gt;</span><span class="token punctuation">]</span>
此命令是一种速记，可帮助您同时做两件事：

<span class="token number">1</span>、create<span class="token operator">-</span><span class="token operator">&lt;</span>starter<span class="token operator">-</span>kit<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">&gt;</span>全局安装，如果已经存在，则将包更新到最新版本
<span class="token number">2</span>、运行位于binstarter kit 字段中的可执行文件<span class="token keyword">package</span><span class="token punctuation">.</span>json，将 any 转发<span class="token operator">&lt;</span>args<span class="token operator">&gt;</span>给它
例如，yarn create react<span class="token operator">-</span>app my<span class="token operator">-</span>app相当于：

$ yarn global add create<span class="token operator">-</span>react<span class="token operator">-</span>app
$ create<span class="token operator">-</span>react<span class="token operator">-</span>app my<span class="token operator">-</span>app
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>`,9),N=e("p",null,"参考链接：",-1),R={href:"http://www.babyitellyou.com/details?id=60726b140a6c640f8b4611b4",target:"_blank",rel:"noopener noreferrer"},H={href:"https://vitejs.cn/",target:"_blank",rel:"noopener noreferrer"};function w(T,P){const n=l("ExternalLinkIcon");return o(),p("div",null,[c,e("ul",null,[e("li",null,[d,e("p",null,[a("Vite 将会使用 "),e("a",u,[a("esbuild"),s(n)]),a(),e("a",v,[a("预构建依赖"),s(n)]),a("。Esbuild 使用 Go 编写，并且比以 JavaScript 编写的打包器预构建依赖快 10-100 倍。")])]),e("li",null,[h,e("p",null,[a("Vite 以 "),e("a",k,[a("原生 ESM"),s(n)]),a(" 方式服务源码。这实际上是让浏览器接管了打包程序的部分工作：Vite 只需要在浏览器请求源码时进行转换并按需提供源码。根据情景动态导入的代码，即只在当前屏幕上实际使用时才会被处理。")])])]),m,e("ul",null,[e("li",null,[g,b,e("p",null,[a("要确保开发服务器和产品构建之间的最佳输出和行为一致并不容易。所以 Vite 附带了一套 "),e("a",_,[a("预配置、预优化"),s(n)]),a(" 的 "),e("a",f,[a("构建命令"),s(n)]),a("，开箱即用。")])]),j]),S,V,e("ul",null,[e("li",null,[a("一个开发服务器，它基于 "),e("a",x,[a("原生 ES 模块"),s(n)]),a(" 提供了 "),e("a",y,[a("丰富的内建功能"),s(n)]),a("，如速度快到惊人的 "),e("a",M,[a("模块热更新（HMR）"),s(n)]),a("。")]),e("li",null,[a("一套构建指令，它使用 "),e("a",E,[a("Rollup"),s(n)]),a(" 打包你的代码，并且它是预配置的，可以输出用于生产环境的优化过的静态资源。")])]),e("blockquote",null,[e("p",null,[a("Vite 需要 "),e("a",C,[a("Node.js"),s(n)]),a(" 版本 >= 12.0.0。")])]),J,e("blockquote",null,[N,e("p",null,[e("a",R,[a("npm init @vitejs/app 到底干了什么"),s(n)])]),e("p",null,[e("a",H,[a("Vite 官方文档"),s(n)])])])])}const z=r(i,[["render",w],["__file","vite.html.vue"]]),B=JSON.parse('{"path":"/vue3/vite.html","title":"Vite","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"为什么选择 vite","slug":"为什么选择-vite","link":"#为什么选择-vite","children":[{"level":3,"title":"极速的服务启动","slug":"极速的服务启动","link":"#极速的服务启动","children":[]},{"level":3,"title":"轻量快速的热重载","slug":"轻量快速的热重载","link":"#轻量快速的热重载","children":[]},{"level":3,"title":"为什么生产环境仍需打包","slug":"为什么生产环境仍需打包","link":"#为什么生产环境仍需打包","children":[]}]},{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[{"level":3,"title":"搭建项目","slug":"搭建项目","link":"#搭建项目","children":[]}]}],"git":{"updatedTime":1708502740000,"contributors":[{"name":"guokc","email":"guokc@tsintergy.com","commits":1}]},"filePathRelative":"vue3/vite.md"}');export{z as comp,B as data};
