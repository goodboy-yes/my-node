import{_ as n,o as a,c as s,e}from"./app-CtA61ec0.js";const t={},p=e(`<h1 id="ahooks" tabindex="-1"><a class="header-anchor" href="#ahooks"><span>ahooks</span></a></h1><h2 id="userequest" tabindex="-1"><a class="header-anchor" href="#userequest"><span>useRequest</span></a></h2><p>useRequest 是一个强大的异步数据管理的 Hooks</p><p>目前已有能力包括：</p><ul><li>自动请求/手动请求</li><li>轮询</li><li>防抖</li><li>节流</li><li>屏幕聚焦重新请求</li><li>错误重试</li><li>loading delay</li><li>SWR(stale-while-revalidate)</li><li>缓存</li></ul><h3 id="默认请求" tabindex="-1"><a class="header-anchor" href="#默认请求"><span>默认请求</span></a></h3><p>默认情况下，<code>useRequest</code> 第一个参数是一个异步函数，在组件初始化时，<strong>会自动执行该异步函数</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> error<span class="token punctuation">,</span> loading <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="手动触发" tabindex="-1"><a class="header-anchor" href="#手动触发"><span>手动触发</span></a></h3><p>设置了 <code>options.manual = true</code>，则 <code>useRequest</code> 不会默认执行，需要通过 <code>run</code> 或者 <code>runAsync</code> 来触发执行</p><p>run 与 runAsync 的区别在于：</p><ul><li>run 是一个普通的同步函数，我们会自动捕获异常，你可以通过 options.onError 来处理异常时的行为。</li><li>runAsync 是一个返回 Promise 的异步函数，如果使用 runAsync 来调用，则意味着你需要自己捕获异常。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> message <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;antd&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> error<span class="token punctuation">,</span> loading<span class="token punctuation">,</span> run <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span>editUsername<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">manual</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token function-variable function">onSuccess</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">result<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">The username was changed to &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; !</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">onError</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期"><span>生命周期</span></a></h3><p><code>useRequest</code> 提供了以下几个生命周期配置项，供你在异步函数的不同阶段做一些处理。</p><ul><li>onBefore：请求之前触发</li><li>onSuccess：请求成功触发</li><li>onError：请求失败触发</li><li>onFinally：请求完成触发</li></ul><h3 id="刷新-重复上一次请求" tabindex="-1"><a class="header-anchor" href="#刷新-重复上一次请求"><span>刷新（重复上一次请求）</span></a></h3><p>useRequest 提供了 <code>refresh</code> 和 <code>refreshAsync</code> 方法，使我们可以使用上一次的参数，重新发起请求。</p><h3 id="立即变更数据" tabindex="-1"><a class="header-anchor" href="#立即变更数据"><span>立即变更数据</span></a></h3><p><code>useRequest</code> 提供了 <code>mutate</code>, 支持立即修改 <code>useRequest</code> 返回的 data 参数。</p><p><code>mutate</code> 的用法与 <code>React.setState</code>一致，支持 <code>mutate(newData)</code> 和 <code>mutate((oldData) =&gt; newData)</code> 两种写法。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">data</span><span class="token operator">:</span> username<span class="token punctuation">,</span> mutate <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span>getUsername<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="取消请求" tabindex="-1"><a class="header-anchor" href="#取消请求"><span>取消请求</span></a></h3><p><code>useRequest</code> 提供了 <code>cancel</code> 函数，可以取消当前正在进行的请求。同时 <code>useRequest</code> 会在以下时机自动取消当前请求：</p><ul><li>组件卸载时，取消正在进行的请求</li><li>竞态取消，当上一次请求还没返回时，又发起了下一次请求，则会取消上一次请求</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> loading<span class="token punctuation">,</span> run<span class="token punctuation">,</span> cancel <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span>editUsername<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">manual</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token function-variable function">onSuccess</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">result<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">The username was changed to &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; !</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">onError</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参数管理" tabindex="-1"><a class="header-anchor" href="#参数管理"><span>参数管理</span></a></h3><p><code>useRequest</code> 返回的 <code>params</code> 会记录当次调用 <code>service</code> 的参数数组。比如你触发了 <code>run(1, 2, 3)</code>，则 <code>params</code> 等于 <code>[1, 2, 3]</code> 。</p><p>如果我们设置了 <code>options.manual = false</code>，则首次调用 <code>service</code> 的参数可以通过 <code>options.defaultParams</code>来设置。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// get username</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> username<span class="token punctuation">,</span>
  run<span class="token punctuation">,</span>
  params<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span>getUsername<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">defaultParams</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="api" tabindex="-1"><a class="header-anchor" href="#api"><span>API</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">loading</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span>
  data<span class="token operator">?</span><span class="token operator">:</span> TData<span class="token punctuation">,</span>
  error<span class="token operator">?</span><span class="token operator">:</span> Error<span class="token punctuation">,</span>
  <span class="token literal-property property">params</span><span class="token operator">:</span> TParams <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token function-variable function">run</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>params<span class="token operator">:</span> TParams</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">,</span>
  <span class="token function-variable function">runAsync</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>params<span class="token operator">:</span> TParams</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Promise<span class="token operator">&lt;</span>TData<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">refresh</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">,</span>
  <span class="token function-variable function">refreshAsync</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Promise<span class="token operator">&lt;</span>TData<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">mutate</span><span class="token operator">:</span> <span class="token punctuation">(</span>data<span class="token operator">?</span><span class="token operator">:</span> TData <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">oldData<span class="token operator">?</span><span class="token operator">:</span> TData</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>TData <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">,</span>
  <span class="token function-variable function">cancel</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token operator">=</span> useRequest<span class="token operator">&lt;</span>TData<span class="token punctuation">,</span> TParams<span class="token operator">&gt;</span><span class="token punctuation">(</span>
  <span class="token function-variable function">service</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> TParams</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Promise<span class="token operator">&lt;</span>TData<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    manual<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span>
    defaultParams<span class="token operator">?</span><span class="token operator">:</span> TParams<span class="token punctuation">,</span>
    onBefore<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">params</span><span class="token operator">:</span> TParams</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">,</span>
    onSuccess<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">data</span><span class="token operator">:</span> TData<span class="token punctuation">,</span> <span class="token literal-property property">params</span><span class="token operator">:</span> TParams</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">,</span>
    onError<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">e</span><span class="token operator">:</span> Error<span class="token punctuation">,</span> <span class="token literal-property property">params</span><span class="token operator">:</span> TParams</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">,</span>
    onFinally<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">params</span><span class="token operator">:</span> TParams<span class="token punctuation">,</span> data<span class="token operator">?</span><span class="token operator">:</span> TData<span class="token punctuation">,</span> e<span class="token operator">?</span><span class="token operator">:</span> Error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="loading-delay" tabindex="-1"><a class="header-anchor" href="#loading-delay"><span>Loading Delay</span></a></h3><p>通过设置 <code>options.loadingDelay</code> ，可以延迟 loading 变成 true 的时间，有效防止闪烁。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> loading<span class="token punctuation">,</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span>getUsername<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">loadingDelay</span><span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="轮询" tabindex="-1"><a class="header-anchor" href="#轮询"><span>轮询</span></a></h3><p>通过设置 <code>options.pollingInterval</code>，进入轮询模式，useRequest 会定时触发 service 执行。</p><p>可以通过 <code>cancel</code> 来停止轮询，通过 <code>run/runAsync</code> 来启动轮询</p><p><code>pollingWhenHidden</code>：在页面隐藏时，是否继续轮询</p><ul><li><code>options.pollingInterval</code>、<code>options.pollingWhenHidden</code> 支持动态变化。</li><li>如果设置 <code>options.manual = true</code>，则初始化不会启动轮询，需要通过 <code>run/runAsync</code> 触发开始。</li><li>轮询原理是在每次请求完成后，等待 <code>pollingInterval</code> 时间，发起下一次请求。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> run<span class="token punctuation">,</span> cancel <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span>getUsername<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">pollingInterval</span><span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ready" tabindex="-1"><a class="header-anchor" href="#ready"><span>Ready</span></a></h3><p><code>useRequest</code> 提供了一个 <code>options.ready</code> 参数，当其值为 false 时，请求永远都不会发出。</p><p>其具体行为如下：</p><ul><li>当 <code>manual=false</code> 自动请求模式时，每次 ready 从 false 变为 true 时，都会自动发起请求，会带上参数 options.defaultParams。</li><li>当 <code>manual=true</code> 手动请求模式时，只要 <code>ready=false</code>，则通过 <code>run/runAsync</code> 触发的请求都不会执行。</li></ul><h3 id="依赖刷新" tabindex="-1"><a class="header-anchor" href="#依赖刷新"><span>依赖刷新</span></a></h3><p><code>useRequest</code> 提供了一个 <code>options.refreshDeps</code> 参数，当它的值变化后，会重新触发请求。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">[</span>userId<span class="token punctuation">,</span> setUserId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> run <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">getUserSchool</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">refreshDeps</span><span class="token operator">:</span> <span class="token punctuation">[</span>userId<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="屏幕聚焦重新请求" tabindex="-1"><a class="header-anchor" href="#屏幕聚焦重新请求"><span>屏幕聚焦重新请求</span></a></h3><p>通过设置 <code>options.refreshOnWindowFocus</code>，在浏览器窗口 <code>refocus</code> 和 <code>revisible</code> 时，会重新发起请求。</p><p><code>focusTimespan</code>：重新请求间隔，单位为毫秒</p><p><code>options.refreshOnWindowFocus、options.focusTimespan</code> 支持动态变化。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span>getUsername<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">refreshOnWindowFocus</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="防抖" tabindex="-1"><a class="header-anchor" href="#防抖"><span>防抖</span></a></h3><p>通过设置 <code>options.debounceWait</code>，进入防抖模式，此时如果频繁触发 <code>run</code> 或者 <code>runAsync</code>，则会以防抖策略进行请求。</p><p>频繁触发 run，只会在最后一次触发结束后执行</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> run <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span>getUsername<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">debounceWait</span><span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>
  <span class="token literal-property property">manual</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="节流" tabindex="-1"><a class="header-anchor" href="#节流"><span>节流</span></a></h3><p>通过设置 <code>options.throttleWait</code>，进入节流模式，此时如果频繁触发 <code>run</code> 或者 <code>runAsync</code>，则会以节流策略进行请求。</p><p>频繁触发 run，只会每隔 300ms 执行一次。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> run <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span>getUsername<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">throttleWait</span><span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>
  <span class="token literal-property property">manual</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="缓存-swr" tabindex="-1"><a class="header-anchor" href="#缓存-swr"><span>缓存 &amp; SWR</span></a></h3><p>如果设置了 <code>options.cacheKey\`\`，useRequest</code> 会将当前请求成功的数据缓存起来。下次组件初始化时，如果有缓存数据，我们会优先返回缓存数据，然后在背后发送新请求，也就是 SWR 的能力。</p><p>你可以通过 <code>options.staleTime</code> 设置数据保持新鲜时间，在该时间内，我们认为数据是新鲜的，不会重新发起请求。</p><p>你也可以通过 <code>options.cacheTime</code> 设置数据缓存时间，超过该时间，我们会清空该条缓存数据。</p><h3 id="错误重试" tabindex="-1"><a class="header-anchor" href="#错误重试"><span>错误重试</span></a></h3><p>通过设置 <code>options.retryCount</code>，指定错误重试次数，则 <code>useRequest</code> 在失败后会进行重试。</p><p><code>cancel</code> 可以取消正在进行的重试行为</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> run <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span>getUsername<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">retryCount</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,69),o=[p];function c(l,i){return a(),s("div",null,o)}const r=n(t,[["render",c],["__file","ahooks.html.vue"]]),d=JSON.parse('{"path":"/react/ahooks.html","title":"ahooks","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"useRequest","slug":"userequest","link":"#userequest","children":[{"level":3,"title":"默认请求","slug":"默认请求","link":"#默认请求","children":[]},{"level":3,"title":"手动触发","slug":"手动触发","link":"#手动触发","children":[]},{"level":3,"title":"生命周期","slug":"生命周期","link":"#生命周期","children":[]},{"level":3,"title":"刷新（重复上一次请求）","slug":"刷新-重复上一次请求","link":"#刷新-重复上一次请求","children":[]},{"level":3,"title":"立即变更数据","slug":"立即变更数据","link":"#立即变更数据","children":[]},{"level":3,"title":"取消请求","slug":"取消请求","link":"#取消请求","children":[]},{"level":3,"title":"参数管理","slug":"参数管理","link":"#参数管理","children":[]},{"level":3,"title":"API","slug":"api","link":"#api","children":[]},{"level":3,"title":"Loading Delay","slug":"loading-delay","link":"#loading-delay","children":[]},{"level":3,"title":"轮询","slug":"轮询","link":"#轮询","children":[]},{"level":3,"title":"Ready","slug":"ready","link":"#ready","children":[]},{"level":3,"title":"依赖刷新","slug":"依赖刷新","link":"#依赖刷新","children":[]},{"level":3,"title":"屏幕聚焦重新请求","slug":"屏幕聚焦重新请求","link":"#屏幕聚焦重新请求","children":[]},{"level":3,"title":"防抖","slug":"防抖","link":"#防抖","children":[]},{"level":3,"title":"节流","slug":"节流","link":"#节流","children":[]},{"level":3,"title":"缓存 & SWR","slug":"缓存-swr","link":"#缓存-swr","children":[]},{"level":3,"title":"错误重试","slug":"错误重试","link":"#错误重试","children":[]}]}],"git":{"updatedTime":1708503944000,"contributors":[{"name":"guokc","email":"guokc@tsintergy.com","commits":1}]},"filePathRelative":"react/ahooks.md"}');export{r as comp,d as data};
