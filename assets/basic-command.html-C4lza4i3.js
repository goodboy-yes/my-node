import{_ as a,o as s,c as n,e}from"./app-ZrMgA43q.js";const i={},t=e(`<h1 id="用法" tabindex="-1"><a class="header-anchor" href="#用法"><span>用法</span></a></h1><h2 id="修改提交作者和邮箱" tabindex="-1"><a class="header-anchor" href="#修改提交作者和邮箱"><span>修改提交作者和邮箱</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>// 设置全局
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;Author Name&quot;</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">&quot;Author Email&quot;</span>

// 或者设置本地项目库配置
<span class="token function">git</span> config user.name <span class="token string">&quot;Author Name&quot;</span>
<span class="token function">git</span> config user.email <span class="token string">&quot;Author Email&quot;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只设置当次提交</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">--author</span><span class="token operator">=</span><span class="token string">&quot;author &lt;email@address.com&gt;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="git-设置代理" tabindex="-1"><a class="header-anchor" href="#git-设置代理"><span>git 设置代理</span></a></h2><h3 id="设置代理" tabindex="-1"><a class="header-anchor" href="#设置代理"><span>设置代理</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> http.proxy <span class="token number">127.0</span>.0.1:7890
<span class="token function">git</span> config <span class="token parameter variable">--global</span> https.proxy <span class="token number">127.0</span>.0.1:7890
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>7890 是我们代理软件（如 clash）的端口</p><h3 id="取消代理" tabindex="-1"><a class="header-anchor" href="#取消代理"><span>取消代理</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> http.proxy
<span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> https.proxy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查看代理" tabindex="-1"><a class="header-anchor" href="#查看代理"><span>查看代理</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--get</span> http.proxy
<span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--get</span> http2.proxy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="基本命令" tabindex="-1"><a class="header-anchor" href="#基本命令"><span>基本命令</span></a></h2><ul><li><code>git init</code>：用于初始化一个 Git 仓库</li><li><code>git status</code>：用于查看当前 Git 状态</li><li><code>git log</code>：查看提交过的 git 历史，按 q 退出</li><li><code>git add</code>：它的使用场景有三个：1、将一个尚未被 Git 跟踪的文件纳入 Git 跟踪；2、将一个已经被 Git 跟踪的文件且这个文件处于修改状态，通过 add，可以将它纳入暂存区；3、将 merge 或者 rebase 后产生的冲突文件标记为冲突已解决。</li><li><code>git commit</code>：将暂存区内容纳入 Git 提交记录</li><li><code>git restore</code>：取消对某个文件的修改</li><li><code>git diff</code>：查看文件修改详情</li><li><code>git checkout</code>：切换分支</li><li><code>git branch</code>：新建分支</li><li><code>git merge</code>：合并分支</li><li><code>git stash</code>：临时保存当前分支的工作状态，方便切换到其它分支。恢复-<code>git stash pop</code></li><li><code>git revert</code>：撤销某次修改，此次操作之前和之后的 commit 和 history 都会保留，并且把这次撤销，作为一次最新的提交</li><li><code>git reset</code>：回退版本，可以遗弃不再使用的提交</li><li><code>git reflog</code>: 打印所有的 commit 操作记录，便于错误操作后找回记录</li></ul><h2 id="git-stash" tabindex="-1"><a class="header-anchor" href="#git-stash"><span>git stash</span></a></h2><h4 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h4><p>stash 命令能够将还未 commit 的代码存起来，让你的工作目录变得干净。</p><h4 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h4><p>当正在 <code>feature</code> 分支开发新需求，突然需要修复 bug，此时有文件更改了，需要提交 commit 保持工作区干净才能切分支，如果不使用 <code>stash</code> 只有急忙 <code>commit</code> 上去，<code>commit</code> 信息也随便写了个“暂存代码”，于是该分支提交记录就留了一条黑历史…</p><h4 id="相关命令" tabindex="-1"><a class="header-anchor" href="#相关命令"><span>相关命令</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 保存当前未commit的代码</span>
<span class="token function">git</span> stash

<span class="token comment"># 保存当前未commit的代码并添加备注</span>
<span class="token function">git</span> stash save <span class="token string">&quot;备注的内容&quot;</span>

<span class="token comment"># 列出stash的所有记录</span>
<span class="token function">git</span> stash list

<span class="token comment"># 删除stash的所有记录</span>
<span class="token function">git</span> stash <span class="token function">clear</span>

<span class="token comment"># 应用最近一次的stash</span>
<span class="token function">git</span> stash apply

<span class="token comment"># 应用最近一次的stash，随后删除该记录</span>
<span class="token function">git</span> stash pop

<span class="token comment"># 删除最近的一次stash</span>
<span class="token function">git</span> stash drop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当有多条 stash，可以指定操作 stash，首先使用 stash list 列出所有记录：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> stash list
stash@<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span>: WIP on <span class="token punctuation">..</span>.
stash@<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span>: WIP on <span class="token punctuation">..</span>.
stash@<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span>: On <span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应用第二条记录：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> stash apply stash@<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>pop，drop 同理。</p><h2 id="git-cherry-pick" tabindex="-1"><a class="header-anchor" href="#git-cherry-pick"><span>git cherry-pick</span></a></h2><h4 id="介绍-1" tabindex="-1"><a class="header-anchor" href="#介绍-1"><span>介绍</span></a></h4><p>将已经提交的 commit，复制出新的 commit 应用到分支里</p><h4 id="应用场景-1" tabindex="-1"><a class="header-anchor" href="#应用场景-1"><span>应用场景</span></a></h4><ul><li><p>有时候版本的一些优化需求开发到一半，可能其中某一个开发完的需求要临时上，或者某些原因导致待开发的需求卡住了已开发完成的需求上线。这时候就需要把 commit 抽出来，单独处理。</p></li><li><p>有时候开发分支中的代码记录被污染了，导致开发分支合到线上分支有问题，这时就需要拉一条干净的开发分支，再从旧的开发分支中，把 commit 复制到新分支。</p></li></ul><h4 id="相关命令-1" tabindex="-1"><a class="header-anchor" href="#相关命令-1"><span>相关命令</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 在目标分支应用，commitHash 和之前的不一样，但是提交时间还是保留之前的</span>
<span class="token function">git</span> cherry-pick <span class="token string">&quot;commitHash&quot;</span>

<span class="token comment"># 一次转移多个提交</span>
<span class="token function">git</span> cherry-pick commit1 commit2

<span class="token comment"># 多个连续的commit，也可区间复制，将 commit1 到 commit2 这个区间的 commit</span>
<span class="token comment"># 都应用到当前分支（包含commit1、commit2），commit1 是最早的提交</span>
<span class="token function">git</span> cherry-pick commit1^<span class="token punctuation">..</span>commit2

<span class="token comment"># cherry-pick --continue时代码冲突，解决完重新提交到暂存区，执行以下命令继续</span>
<span class="token function">git</span> cherry-pick <span class="token parameter variable">--continue</span>

<span class="token comment"># 放弃 cherry-pick。回到操作前的样子，就像什么都没发生过</span>
<span class="token function">git</span> cherry-pick <span class="token parameter variable">--abort</span>

<span class="token comment"># 退出 cherry-pick。保留已经cherry-pick成功的 commit，并退出cherry-pick流程</span>
<span class="token function">git</span> cherry-pick <span class="token parameter variable">--quit</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="git-checkout" tabindex="-1"><a class="header-anchor" href="#git-checkout"><span>git checkout</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 用于创建并切换到一个名为 feat/X 的新分支。</span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> feature-branch
<span class="token comment"># 从一个已经存在的分支上创建一个新的分支</span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> feature-branch main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout <span class="token operator">&lt;</span>pathspec<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里，<code>pathspec</code> 可以是任何有效的路径说明符，例如：. 对于当前目录、<code>path/to/file</code>、<code>file.extension</code>，甚至是正则表达式。</p><p>这将清除对指定文件的所有未暂存更改并恢复当前分支的文件的未修改版本。此命令不会影响暂存文件——只会清除未暂存的更改。</p><p>例如，如果想清除当前目录中所有未暂存的更改并从头开始，最简单的方法是使用 <code>git checkout .</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout origin/master -- <span class="token operator">&lt;</span>pathspec<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们也可以使用 <code>git checkout</code> 来恢复文件的本地或远程版本。这个命令的作用是将远程分支 <code>origin/master</code> 上指定的文件 <code>pathspec</code> 签出到本地分支上。该命令会用远程分支上的文件覆盖本地分支上的同名文件，即用远程分支的版本替换本地分支的版本，从而确保本地分支与远程分支保持同步。</p>`,42),c=[t];function l(o,d){return s(),n("div",null,c)}const r=a(i,[["render",l],["__file","basic-command.html.vue"]]),u=JSON.parse('{"path":"/git/basic-command.html","title":"用法","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"修改提交作者和邮箱","slug":"修改提交作者和邮箱","link":"#修改提交作者和邮箱","children":[]},{"level":2,"title":"git 设置代理","slug":"git-设置代理","link":"#git-设置代理","children":[{"level":3,"title":"设置代理","slug":"设置代理","link":"#设置代理","children":[]},{"level":3,"title":"取消代理","slug":"取消代理","link":"#取消代理","children":[]},{"level":3,"title":"查看代理","slug":"查看代理","link":"#查看代理","children":[]}]},{"level":2,"title":"基本命令","slug":"基本命令","link":"#基本命令","children":[]},{"level":2,"title":"git stash","slug":"git-stash","link":"#git-stash","children":[]},{"level":2,"title":"git cherry-pick","slug":"git-cherry-pick","link":"#git-cherry-pick","children":[]},{"level":2,"title":"git checkout","slug":"git-checkout","link":"#git-checkout","children":[]}],"git":{"updatedTime":1708502740000,"contributors":[{"name":"guokc","email":"guokc@tsintergy.com","commits":1}]},"filePathRelative":"git/basic-command.md"}');export{r as comp,u as data};
