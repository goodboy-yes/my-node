import{_ as n,o as s,c as a,e as t}from"./app-ZrMgA43q.js";const p={},e=t(`<h1 id="跨域" tabindex="-1"><a class="header-anchor" href="#跨域"><span>跨域</span></a></h1><h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案"><span>解决方案</span></a></h2><h3 id="jsonp" tabindex="-1"><a class="header-anchor" href="#jsonp"><span>JSONP</span></a></h3><p>JSONP 是 JSON with Padding 的缩写，利用了<code>&lt;script&gt;</code> 标签的 src 属性没有跨域限制</p><p>具体实现思路大致分为以下步骤：</p><ul><li>本站的脚本创建一个 元素，src 地址指向跨域请求数据的服务器</li><li>提供一个回调函数来接受数据，函数名可以通过地址参数传递进行约定</li><li>服务器收到请求后，返回一个包装了 JSON 数据的响应字符串，类似这样：callback({...})</li></ul><p>浏览器接受响应后就会去执行回调函数 callback，传递解析后的 JSON 对象作为参数，这样我们就可以在 callback 里处理数据了</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> url<span class="token punctuation">,</span> params<span class="token punctuation">,</span> callback <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建一个临时的 script 标签用于发起请求</span>
    <span class="token keyword">const</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 将回调函数临时绑定到 window 对象，回调函数执行完成后，移除 script 标签</span>
    window<span class="token punctuation">[</span>callback<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 构造 GET 请求参数，key=value&amp;callback=callback</span>
    <span class="token keyword">const</span> formatParams <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>params<span class="token punctuation">,</span> callback <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> requestParams <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>formatParams<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> acc<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>cur<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>formatParams<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
   <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&amp;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// 构造 GET 请求的 url 地址</span>
    <span class="token keyword">const</span> src <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>requestParams<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    script<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;src&#39;</span><span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>
    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 调用时</span>
<span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;https://xxx.xxx&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">callback</span><span class="token operator">:</span> <span class="token string">&#39;func&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本质上就是：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>https://xxx.xxx.xx?key=value&amp;callback=xxx<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>缺点：</strong> 需要服务器支持而且只支持 GET 请求</p><h3 id="cors" tabindex="-1"><a class="header-anchor" href="#cors"><span>CORS</span></a></h3><p>CORS（Cross-Origin Resource Sharing）的全称叫 跨域资源共享</p><p>CORS 实现的原理：使用额外的 HTTP 头来告诉浏览器，让运行在某一个 origin 上的 Web 应用允许访问来自不同源服务器上的指定的资源。</p><p>整个 CORS 的通信过程，都是浏览器自动完成。</p><p>浏览器一旦发现请求是一个跨域请求，首先会判断请求的类型，</p><p>如果是<strong>简单请求</strong>，会在请求头中增加一个 Origin 字段，表示这次请求是来自哪一个源。而服务器接受到请求后，会返回一个响应，响应头中会包含一个叫 Access-Control-Allow-Origin 的字段，它的值要么包含由 Origin 首部字段所指明的域名，要么是一个 &quot;*&quot;，表示接受任意域名的请求。如果响应头中没有这个字段，就说明当前源不在服务器的许可范围内，浏览器就会报错</p><p>如果是<strong>非简单请求</strong>，会在正式通信之前，发送一个预检请求（preflight），目的在于询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些 HTTP 动词和头信息字段，只有得到肯定答复，浏览器才会发出正式的请求，否则就报错。</p><blockquote><p>简单请求: GET, HEAD, POST,并且 Content-Type 的值仅限于下列三者之一： text/plain multipart/form-data application/x-www-form-urlencoded</p></blockquote><p>实现 CORS 的关键是服务器，只要服务器实现了 CORS 的相关接口，就可以实现跨域。</p><p>CORS 与 JSONP相比，<strong>优势</strong>是支持所有的请求方法，<strong>缺点</strong>是兼容性上较 JSONP 差</p><h3 id="postmessage" tabindex="-1"><a class="header-anchor" href="#postmessage"><span>PostMessage</span></a></h3><p>PostMessage 是 Html5 XMLHttpRequest Level 2 中的 API，它可以实现跨文档通信（Cross-document messaging）</p><h3 id="websocket" tabindex="-1"><a class="header-anchor" href="#websocket"><span>Websocket</span></a></h3><p>Websocket 是 HTML5 的一个持久化的协议，它实现了浏览器与服务器的全双工通信，同时也是跨域的一种解决方案。</p><h3 id="nginx-反向代理-和-node-中间件代理" tabindex="-1"><a class="header-anchor" href="#nginx-反向代理-和-node-中间件代理"><span>Nginx 反向代理 和 Node 中间件代理</span></a></h3><h3 id="document-domain" tabindex="-1"><a class="header-anchor" href="#document-domain"><span>document.domain</span></a></h3><p>二级域名相同的情况下，设置 document.domain 就可以实现跨域。</p>`,28),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","cross-domain.html.vue"]]),k=JSON.parse('{"path":"/js/cross-domain.html","title":"跨域","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"解决方案","slug":"解决方案","link":"#解决方案","children":[{"level":3,"title":"JSONP","slug":"jsonp","link":"#jsonp","children":[]},{"level":3,"title":"CORS","slug":"cors","link":"#cors","children":[]},{"level":3,"title":"PostMessage","slug":"postmessage","link":"#postmessage","children":[]},{"level":3,"title":"Websocket","slug":"websocket","link":"#websocket","children":[]},{"level":3,"title":"Nginx 反向代理 和 Node 中间件代理","slug":"nginx-反向代理-和-node-中间件代理","link":"#nginx-反向代理-和-node-中间件代理","children":[]},{"level":3,"title":"document.domain","slug":"document-domain","link":"#document-domain","children":[]}]}],"git":{"updatedTime":1708502740000,"contributors":[{"name":"guokc","email":"guokc@tsintergy.com","commits":1}]},"filePathRelative":"js/cross-domain.md"}');export{r as comp,k as data};
