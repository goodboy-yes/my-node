import{_ as n,o as s,c as a,e}from"./app-CtA61ec0.js";const t={},p=e(`<h1 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式"><span>正则表达式</span></a></h1><h2 id="构造正则表达式" tabindex="-1"><a class="header-anchor" href="#构造正则表达式"><span>构造正则表达式</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//通过字面常量的方式，一对正斜杠中间写表达式内容,后面可以跟修饰符。</span>
<span class="token keyword">const</span> ex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[abcd]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">;</span>

<span class="token comment">//通过构造函数的方式，第一个参数是表达式内容，第二个参数是修饰符</span>
<span class="token keyword">const</span> re <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;[abcd]&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;gi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="修饰符" tabindex="-1"><a class="header-anchor" href="#修饰符"><span>修饰符</span></a></h2><ul><li><code>i</code> 执行大小写不敏感的匹配</li><li><code>g</code>执行全局匹配，即返回所有匹配的子串，默认只返回第一个匹配</li><li><code>m</code>多行匹配，^ 和 $ 在字符串的每一行都进行一次匹配。</li><li><code>s</code>使特殊字符圆点 <code>.</code>中包含换行符 <code>\\n</code></li></ul><h2 id="量词" tabindex="-1"><a class="header-anchor" href="#量词"><span>量词</span></a></h2><p>正则默认是只匹配一次的，即一次匹配完后就算后文还有符合的内容也不再获取，这涉及到修饰符<code>g</code></p><ul><li><p><code>*</code> 匹配前面的子表达式零次或多次。例如，<code>zo*</code> 能匹配 &quot;z&quot; 以及 &quot;zoo&quot;。 * 等价于<code>{0,}</code>。</p></li><li><p><code>+</code> 匹配前面的子表达式一次或多次。例如，<code>zo+</code> 能匹配 &quot;zo&quot; 以及 &quot;zoo&quot;，但不能匹配 &quot;z&quot;。+ 等价于 <code>{1,}</code>。</p></li><li><p><code>?</code> 匹配前面的子表达式零次或一次。例如，<code>do(es)?</code> 可以匹配 &quot;do&quot; 或 &quot;does&quot; 中的&quot;do&quot; 。? 等价于 <code>{0,1}</code>。</p></li><li><p><code>{}</code> 表示前面的字符应该出现的次数。<code>{n}</code>表示出现 n 次;<code>{n,}</code>表示至少出现 n 次；<code>{n,m}</code>表示出现 n 次到 m 次。</p></li></ul><p><strong>量词模式</strong></p><p>量词还涉及到模式问题，因为量词有范围，这就意味着可取多可取少，但计算机是不允许有歧义的，所以量词存在三种模式</p><ul><li>贪婪模式：默认，会尽可能匹配多的内容</li><li>懒惰模式：量词后面加个<code>?</code>，会尽可能少匹配内容</li><li>独占模式：量词后面加个<code>+</code>，不触发回溯动作</li></ul><h2 id="元字符" tabindex="-1"><a class="header-anchor" href="#元字符"><span>元字符</span></a></h2><ul><li><p><code>\\</code> 在字面意义和特殊意义之间进行转换，例如/表示字符/。</p></li><li><p><code>^</code> 匹配字符串的开头</p></li><li><p><code>$</code> 匹配字符串的结尾</p></li><li><p><code>()</code> 小括号里面的元素结合为一组，可以在后面引用它</p></li><li><p><code>[]</code> 匹配字符集中的一个字符，例如<code>[abc]</code>表示匹配字符 a 或 b 或 c；[^abc]表示匹配不等于 a 或 b 或 c 的字符；<code>[a-e]</code>匹配在 a 到 e 范围内的字符；<code>[a-b0-9A-Z_]</code>匹配字母数字和下划线。</p></li><li><p><code>|</code> 或操作，例如<code>(jpg|png)</code>表示匹配字符串 jpg 或字符串 png。注意，用<code>/good|goodbye/</code>去匹配&#39;goodbye&#39; 匹配到的是 good，因为分支结构是惰性的，前面的匹配上了，后面的就不再尝试了</p></li><li><p><code>\\f</code> 匹配一个换页符。等价于 <code>\\x0c</code> 和 <code>\\cL</code>。</p></li><li><p><code>\\n</code> 匹配一个换行符。等价于 <code>\\x0a</code> 和 <code>\\cJ</code>。</p></li><li><p><code>\\r</code> 匹配一个回车符。等价于 <code>\\x0d</code> 和 <code>\\cM</code>。</p></li><li><p><code>\\t</code> 匹配一个制表符。等价于<code>\\x09</code> 和 <code>\\cI</code>。</p></li><li><p><code>\\v</code> 匹配一个垂直制表符。等价于 <code>\\x0b</code> 和 <code>\\cK</code>。</p></li><li><p><code>.</code> 匹配除换行符 \\n 之外的任何单字符。</p></li><li><p><code>\\d</code> 匹配数字<code>[0-9]</code></p></li><li><p><code>\\D</code> 匹配非数字字符<code>[^0-9]</code></p></li><li><p><code>\\s</code> 匹配一个空白字符<code>[\\f\\n\\r\\t\\v]</code></p></li><li><p><code>\\S</code> 匹配一个非空白字符<code>[^\\f\\n\\r\\t\\v]</code></p></li><li><p><code>\\w</code> 匹配字母数字和下划线<code>[a-zA-Z0-9_]</code></p></li><li><p><code>\\W</code> 匹配除字母数字下划线之外的字符<code>[^a-za-z0-9_] </code></p></li><li><p><code>\\b</code>匹配一个零宽单词边界</p></li><li><p><code>\\B</code> 匹配一个零宽非单词边界</p><p>零宽: 只匹配位置, 不匹配字符</p><p>单词： 在 JS 中, 单词的定义就是<code>\\w</code>, 非单词的定义就是<code>\\W</code>, 非常简洁</p><p>边界：也就是在这个位置之前是单词, 那么在这个位置之后就是非单词, 反之也是这样。例如:</p><p><img src="https://pic2.zhimg.com/50/v2-46442794009ec26d73a388519b9cab86_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/80/v2-46442794009ec26d73a388519b9cab86_720w.jpg?source=1940ef5c" alt="img"></p><p>从上图可以看到, 在开头和结尾各有一个单词边界, 因为开头处, 边界的右端是单词, 而左端不是, 二者不同, 所以就有一个单词界限.</p><p>在 <code>My</code> 的结尾处也有一处界限, 因为在界限的左端是单词 <code>y</code>, 右端是空格, 二者不同, 所以是界限.</p><p>何谓非边界? 同类无界. <code>\\w\\w</code> 或者 <code>\\W\\W</code>, 这个位置前后都是同类, 所以就没有界这一说.</p><p><img src="https://pic2.zhimg.com/50/v2-e6c9037e18c8dee5b1228831d818fd3c_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/80/v2-e6c9037e18c8dee5b1228831d818fd3c_720w.jpg?source=1940ef5c" alt="img"></p><p>单词和单词是同类, 之间无界限, 所以我们可以看到每个字母之间都是非界限.</p><p>在 <code>cat</code> 后面有两个空格, 两个非单词也是同类, 所以中间有一个非界限.</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">ter\\b</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span> <span class="token comment">// 匹配单词 Chapter 中的字符串 ter</span>
<span class="token operator">/</span>\\Bapt<span class="token operator">/</span><span class="token punctuation">;</span> <span class="token comment">// 匹配 Chapter 中的字符串 apt，但不匹配 aptitude 中的字符串 apt：</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>(?:pattern) </code>非获取匹配，匹配 &#39;pattern&#39; 但不获取匹配结果，不进行存储供以后使用。这在使用或字符“(|)”来组合一个模式的各个部分是很有用。例如“<code>industr(?:y|ies)</code>”就是一个比“<code>industry|industries</code>”更简略的表达式。</p></li><li><p><code>(?=pattern)</code>非获取匹配，正向肯定预查，在任何匹配 &#39;pattern&#39;的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。例如，“<code>Windows(?=95|98|NT|2000)</code>”能匹配“Windows2000”中的“Windows”，但不能匹配“Windows3.1”中的“Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</p></li><li><p><code> (?!pattern)</code>非获取匹配，正向否定预查，在任何不匹配 pattern 的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。例如“<code>Windows(?!95|98|NT|2000)</code>”能匹配“Windows3.1”中的“Windows”，但不能匹配“Windows2000”中的“Windows”。</p></li><li><p><code>(?&lt;=pattern)</code>非获取匹配，反向肯定预查，与正向肯定预查类似，只是方向相反。例如，“<code>(?&lt;=95|98|NT|2000)Windows</code>”能匹配“2000Windows”中的“Windows”，但不能匹配“3.1Windows”中的“Windows”。</p></li><li><p><code>(?&lt;!pattern)</code>非获取匹配，反向否定预查，与正向否定预查类似，只是方向相反。例如“<code>(?&lt;!95|98|NT|2000)Windows</code>”能匹配“3.1Windows”中的“Windows”，但不能匹配“2000Windows”中的“Windows”。</p></li></ul><p>大部分元字符与自己最近的元素或组相结合，除了<code>|</code>字符与它所在的组内的前后所有元素相结合。</p><p>默认情况下对于出现次数的匹配都采用<strong>贪婪匹配</strong>的方式，即尽可能地多匹配。例如用<code>/a+/</code>匹配字符串&quot;aaaaaa&quot;,将匹配&quot;aaaaaa&quot;而不是&quot;a&quot;。 在次数匹配字符后面加<code>?</code>可将贪婪匹配改为<strong>谨慎匹配</strong>，例如<code>/a+?/</code>匹配字符串&quot;aaaaaa&quot;,将匹配&quot;a&quot;。</p><p>若要匹配一行文本开始处的文本，请在正则表达式的开始使用<code>^</code> 字符。不要将 <code>^</code> 的这种用法与中括号表达式内的用法混淆</p><h2 id="反向应用" tabindex="-1"><a class="header-anchor" href="#反向应用"><span>反向应用</span></a></h2><p>一个正则表达式中括号内的模式会存储到一个临时缓冲区中，缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 <code>\\n</code> 访问</p><p>可以使用非捕获元字符 <code>?:</code>、<code>?=</code> 或 <code>?!</code> 来重写捕获，忽略对相关匹配的保存。</p><p>如<code>/\\b([a-z]+) \\1\\b/ig</code>匹配重复的单词，<code>\\1</code> 指定第一个子匹配项，单词边界元字符确保只检测整个单词。否则，诸如 &quot;<code>is issued</code>&quot; 或 &quot;<code>this is</code>&quot; 之类的词组将不能正确地被此表达式识别。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/*
    写一个正则支持以下三种格式
  2016-06-12
  2016/06/12
  2016.06-12
*/</span>
<span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d{4})([-/.])\\d{2}\\2\\d{2}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>

<span class="token keyword">var</span> string1 <span class="token operator">=</span> <span class="token string">&quot;2017-06-12&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> string2 <span class="token operator">=</span> <span class="token string">&quot;2017/06/12&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> string3 <span class="token operator">=</span> <span class="token string">&quot;2017.06.12&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> string4 <span class="token operator">=</span> <span class="token string">&quot;2016-06/12&quot;</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>引用不存在的分组即匹配的就是<code> \\1</code>,<code>\\2</code>本身</p></li><li><p>分组后面如果有量词，分组最终(注意是分组，不是说整体)捕获的数据是最后一次的匹配</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string">&#39;12345&#39;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span> <span class="token comment">// [&quot;12345&quot;, index: 0, input: &quot;12345&quot;, groups: undefined]</span>
<span class="token string">&#39;12345&#39;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d)+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span> <span class="token comment">// [&quot;12345&quot;, &quot;5&quot;, index: 0, input: &quot;12345&quot;, groups: undefined]</span>

<span class="token operator">/</span><span class="token punctuation">(</span>\\d<span class="token punctuation">)</span><span class="token operator">+</span> \\<span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;12345 1&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
<span class="token operator">/</span><span class="token punctuation">(</span>\\d<span class="token punctuation">)</span><span class="token operator">+</span> \\<span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;12345 5&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="非捕获性括号" tabindex="-1"><a class="header-anchor" href="#非捕获性括号"><span>非捕获性括号</span></a></h2><p>上面使用的括号都会匹配他们匹配到的数据，以便后续引用，所以也可以称为捕获型分组和捕获型分支。</p><p>如果想要括号最原始的功能，但不会引用它，也就是既不会出现在 API 引用里，也不会出现在正则引用里，可以使用<strong>非捕获性括号<code>（?:p）</code></strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 因为是非捕获型分组，所以使用match方法时，&quot;ab&quot;不会出现在数组的1位置了</span>
<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:ab)+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;ababa abbb ababab&quot;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;abab&quot;, index: 0, input: &quot;ababa abbb ababab&quot;, groups: undefined]</span>
<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(ab)+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;ababa abbb ababab&quot;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;abab&quot;, &quot;ab&quot;, index: 0, input: &quot;ababa abbb ababab&quot;, groups: undefined]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="命名分组" tabindex="-1"><a class="header-anchor" href="#命名分组"><span>命名分组</span></a></h2><p>在 js 关于正则的方法中，如果存在命名分组，会存在 groups 属性，里面存放着每个命名分组的名称以及它们匹配到的值；结合解构赋值，会有很神奇的功效</p><p><code>exec()</code> 和 <code>match()</code> 方法返回的匹配结果数组上多了一个 groups 属性，里面存放着每个命名分组的名称以及它们匹配到的值</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> day<span class="token punctuation">,</span> month<span class="token punctuation">,</span> year <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token string">&quot;04-25-2017&quot;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>
  <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;month&gt;\\d{2})-(?&lt;day&gt;\\d{2})-(?&lt;year&gt;\\d{4})</span><span class="token regex-delimiter">/</span></span>
<span class="token punctuation">)</span><span class="token punctuation">.</span>groups<span class="token punctuation">;</span>
<span class="token comment">// {day:25, month:04, year:2017}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>replace(/.../, replacement)</code> 中的使用，当 replacement 为函数时，在实参列表的最末尾，多传了一个 groups 对象</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string">&quot;04-25-2017&quot;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>
  <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;month&gt;\\d{2})-(?&lt;day&gt;\\d{2})-(?&lt;year&gt;\\d{4})</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> groups <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> day<span class="token punctuation">,</span> month<span class="token punctuation">,</span> year <span class="token punctuation">}</span> <span class="token operator">=</span> groups<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>day<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>month<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>year<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="正则匹配举例" tabindex="-1"><a class="header-anchor" href="#正则匹配举例"><span>正则匹配举例</span></a></h2><h3 id="验证电子邮件" tabindex="-1"><a class="header-anchor" href="#验证电子邮件"><span>验证电子邮件</span></a></h3><p><code>/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/</code></p><ol><li>以<code>\\w</code>起头，随后可以包含任意数量的“.”或“-”只要他们之间有一个或多个\\w 分隔即可（对应于域名检测）；</li><li>用户名之后带一个@字符；</li><li>以\\w 起头，随后可以包含任意数量的“.”或“-”只要他们之间有一个或多个\\w 分隔即可（对应于邮箱地址检测）；</li><li>以“.”加上 2 到 3 个“\\w”结尾。(对应于邮箱地址后缀的检测例如“.com”,“.cn”等)。</li></ol><h3 id="验证文件路径" tabindex="-1"><a class="header-anchor" href="#验证文件路径"><span>验证文件路径</span></a></h3><p><code>/^(http|https|file):\\/\\/\\S+\\/\\S+/i</code></p><ol><li>文件路径使用 http 或 https 或 file 开头，后跟://</li><li>然后是任意个非空字符表示的文件路径</li><li>最后是/加上任意非空字符表示的文件名</li><li>修饰符 i 忽略大小写</li></ol><h3 id="提取数据" tabindex="-1"><a class="header-anchor" href="#提取数据"><span>提取数据</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 2021-08-14</span>
<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d{4})-(\\d{2})-(\\d{2})</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;2021-08-14&quot;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//  [&quot;2021-08-14&quot;, &quot;2021&quot;, &quot;08&quot;, &quot;14&quot;, index: 0, input: &quot;2021-08-14&quot;, groups: undefined]</span>

<span class="token comment">// 第二种解法,通过全局的$1...$9读取 引用的括号数据</span>
<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d{4})-(\\d{2})-(\\d{2})</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token string">&quot;2021-08-14&quot;</span><span class="token punctuation">;</span>

reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2021</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 08</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 14</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据替换" tabindex="-1"><a class="header-anchor" href="#数据替换"><span>数据替换</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/*
将以下格式替换为mm/dd/yyy
2021-08-14
*/</span>

<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d{4})-(\\d{2})-(\\d{2})</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token string">&quot;2021-08-14&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 第一种写法</span>
<span class="token keyword">let</span> result1 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">&quot;$2/$3/$1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 08/14/2021</span>
<span class="token comment">// 第二种写法</span>
<span class="token keyword">let</span> result2 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> RegExp<span class="token punctuation">.</span>$2 <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">+</span> RegExp<span class="token punctuation">.</span>$3 <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">+</span> RegExp<span class="token punctuation">.</span>$1<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 08/14/2021</span>
<span class="token comment">// 第三种写法</span>
<span class="token keyword">let</span> result3 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">$0<span class="token punctuation">,</span> $1<span class="token punctuation">,</span> $2<span class="token punctuation">,</span> $3</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> $2 <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">+</span> $3 <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">+</span> $1<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 08/14/2021</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数字的千分位分割法" tabindex="-1"><a class="header-anchor" href="#数字的千分位分割法"><span>数字的千分位分割法</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> price <span class="token operator">=</span> <span class="token string">&quot;123456789&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> priceReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?!^)(?=(\\d{3})+$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>price<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>priceReg<span class="token punctuation">,</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123,456,789</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="手机号-3-4-4-分割扩展" tabindex="-1"><a class="header-anchor" href="#手机号-3-4-4-分割扩展"><span>手机号 3-4-4 分割扩展</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">formatMobile</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">mobile</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">String</span><span class="token punctuation">(</span>mobile<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;=\\d{3})\\d+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">$0</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> $0<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;=[\\d-]{8})\\d{1,4}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">$0</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> $0<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">formatMobile</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">formatMobile</span><span class="token punctuation">(</span><span class="token number">12345</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123-45</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">formatMobile</span><span class="token punctuation">(</span><span class="token number">1234567</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123-4567</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">formatMobile</span><span class="token punctuation">(</span><span class="token number">123456789</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123-4567-89</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">formatMobile</span><span class="token punctuation">(</span><span class="token number">12345678911</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123-4567-8911</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="验证密码的合法性" tabindex="-1"><a class="header-anchor" href="#验证密码的合法性"><span>验证密码的合法性</span></a></h3><p>密码长度是 6-12 位，由数字、小写字符和大写字母组成，但必须至少包括 2 种字符</p><p>有下面四种排列组合方式 ① 数字和小写字母组合</p><p>② 数字和大写字母组合</p><p>③ 小写字母与大写字母组合</p><p>④ 数字、小写字母、大写字母一起组合</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 表示条件①和②</span>
<span class="token comment">// let reg = /((?=.*\\d)((?=.*[a-z])|(?=.*[A-Z])))/</span>
<span class="token comment">// 表示条件条件③</span>
<span class="token comment">// let reg = /(?=.*[a-z])(?=.*[A-Z])/</span>
<span class="token comment">// 表示条件①②③</span>
<span class="token comment">// let reg = /((?=.*\\d)((?=.*[a-z])|(?=.*[A-Z])))|(?=.*[a-z])(?=.*[A-Z])/</span>
<span class="token comment">// 表示题目所有条件</span>
<span class="token keyword">let</span> reg <span class="token operator">=</span>
  <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">((?=.*\\d)((?=.*[a-z])|(?=.*[A-Z])))|(?=.*[a-z])(?=.*[A-Z])^[a-zA-Z\\d]{6,12}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;1a1a1a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="正则表达式的使用" tabindex="-1"><a class="header-anchor" href="#正则表达式的使用"><span>正则表达式的使用</span></a></h2><h3 id="regexp-类" tabindex="-1"><a class="header-anchor" href="#regexp-类"><span>RegExp 类：</span></a></h3><p><code>RegExp.source</code> 返回正则表达式的内容</p><p><code>RegExp.test(s)</code> 测试字符串 s 是否与正则表达式项匹配</p><p><code>RegExp.exec(s)</code> 匹配字符串 s，返回匹配到的子串和各个组匹配到的子串的数组，若没有匹配到任何子串则返回 null</p><p><code>RegExp.lastIndex</code> 返回最近一次匹配到的位置。默认值为-1，用于标记由方法 <strong>RegExp.exec()</strong> 和 <strong>RegExp.test()</strong> 找到的结果的下次检索的起始点。只有正则表达式使用了表示全局检索的 &quot;<code>g</code>&quot; 标志时，该属性才会起作用</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\w</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;js&#39;</span><span class="token punctuation">)</span> <span class="token comment">//true</span>
reg<span class="token punctuation">.</span>lastIndex <span class="token comment">//1</span>
reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;js&#39;</span><span class="token punctuation">)</span> <span class="token comment">//true</span>
reg<span class="token punctuation">.</span>lastIndex <span class="token comment">//2</span>
reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;js&#39;</span><span class="token punctuation">)</span> <span class="token comment">//false</span>
reg<span class="token punctuation">.</span>lastIndex <span class="token comment">//0 匹配失败后清零</span>

<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&quot;hello123back, hello456back&quot;</span><span class="token punctuation">;</span>
<span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(hello).*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token comment">// true</span>
<span class="token operator">/</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token comment">// [&#39;hello123back, hello456back&#39;,&#39;hello&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string-类" tabindex="-1"><a class="header-anchor" href="#string-类"><span>String 类</span></a></h3><h4 id="string-search-re" tabindex="-1"><a class="header-anchor" href="#string-search-re"><span><code>String.search(re)</code></span></a></h4><p>返回 re 匹配到的第一个位置，若不匹配则返回-1。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>str<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(hello).*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="string-match-re" tabindex="-1"><a class="header-anchor" href="#string-match-re"><span><code>String.match(re)</code></span></a></h4><p>返回 re 匹配到的所有子串的数组，若不匹配返回 null。</p><p><code>match</code> 方法的返回值与修饰符 <code>g</code> 有关（没有匹配上时返回 null）</p><ul><li><p>没有 <code>g</code> ：返回标准匹配格式，即：数组的第一个元素是整体匹配的内容，接下来是分组捕获的内容，然后是整体匹配的第一个下标，最后是目标字符串</p></li><li><p>有 <code>g</code> ：返回的是一个包含所有匹配内容的数组</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(hello).*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;hello123back, hello456back&#39;,&#39;hello&#39;]</span>
str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:hello).*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;hello123back, hello456back&#39;]</span>

<span class="token string">&quot;2020-06 2020-07&quot;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d{4}-\\d{2}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//  [&#39;2020-06&#39;, &#39;2020-07&#39;]</span>

<span class="token string">&quot;2020-06 2020-07&quot;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d{4}-\\d{2}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [&#39;2020-06&#39;, index: 0, input: &#39;2020-06 2020-07&#39;, groups: undefined]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="string-split-re" tabindex="-1"><a class="header-anchor" href="#string-split-re"><span><code>String.split(re)</code></span></a></h4><p>用正则表达式匹配到的所有子串来将字符串分割为字符串数组。</p><h4 id="string-replace-re-s" tabindex="-1"><a class="header-anchor" href="#string-replace-re-s"><span><code>String.replace(re, s)</code></span></a></h4><p>将 re 匹配到的字符替换为 s。(replace 方法的第二个参数也可以是函数)</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string">&quot;02-20-2020 05-21-2020&quot;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d{2})-(\\d{2})-(\\d{4})</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;$3年$2月$1日&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#39;2020年20月02日 2020年21月05日&#39;</span>

<span class="token string">&quot;02-20-2020 05-21-2020&quot;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d{2})-(\\d{2})-(\\d{4})</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&quot;$3年$2月$1日&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#39;2020年20月02日 05-21-2020&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,75),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","regular-expression.html.vue"]]),d=JSON.parse('{"path":"/js/regular-expression.html","title":"正则表达式","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"构造正则表达式","slug":"构造正则表达式","link":"#构造正则表达式","children":[]},{"level":2,"title":"修饰符","slug":"修饰符","link":"#修饰符","children":[]},{"level":2,"title":"量词","slug":"量词","link":"#量词","children":[]},{"level":2,"title":"元字符","slug":"元字符","link":"#元字符","children":[]},{"level":2,"title":"反向应用","slug":"反向应用","link":"#反向应用","children":[]},{"level":2,"title":"非捕获性括号","slug":"非捕获性括号","link":"#非捕获性括号","children":[]},{"level":2,"title":"命名分组","slug":"命名分组","link":"#命名分组","children":[]},{"level":2,"title":"正则匹配举例","slug":"正则匹配举例","link":"#正则匹配举例","children":[{"level":3,"title":"验证电子邮件","slug":"验证电子邮件","link":"#验证电子邮件","children":[]},{"level":3,"title":"验证文件路径","slug":"验证文件路径","link":"#验证文件路径","children":[]},{"level":3,"title":"提取数据","slug":"提取数据","link":"#提取数据","children":[]},{"level":3,"title":"数据替换","slug":"数据替换","link":"#数据替换","children":[]},{"level":3,"title":"数字的千分位分割法","slug":"数字的千分位分割法","link":"#数字的千分位分割法","children":[]},{"level":3,"title":"手机号 3-4-4 分割扩展","slug":"手机号-3-4-4-分割扩展","link":"#手机号-3-4-4-分割扩展","children":[]},{"level":3,"title":"验证密码的合法性","slug":"验证密码的合法性","link":"#验证密码的合法性","children":[]}]},{"level":2,"title":"正则表达式的使用","slug":"正则表达式的使用","link":"#正则表达式的使用","children":[{"level":3,"title":"RegExp 类：","slug":"regexp-类","link":"#regexp-类","children":[]},{"level":3,"title":"String 类","slug":"string-类","link":"#string-类","children":[]}]}],"git":{"updatedTime":1708503944000,"contributors":[{"name":"guokc","email":"guokc@tsintergy.com","commits":1}]},"filePathRelative":"js/regular-expression.md"}');export{r as comp,d as data};
